
slime-loads-GNU-clbuild.el,3917
(defgroup mon-slime 322,12252
(defcustom *mon-slime-xrefs*347,13973
(defgroup mon-qucklisp 411,17056
(defcustom *quicklisp-path* 451,19062
(defun quicklisp-find-slime 472,20124
(defun quicklisp-current-swank-loader 525,22770
(defun quicklisp-write-dot-swank-loader 579,25909
(defun quicklisp-write-dot-swank-loader-if 623,28240
(defun quicklisp-dot-swank-current-p 648,29624
(defvar *quicklisp-systems* 686,31578
(defun quicklisp-hash-system-completions 702,32327
(defun quicklisp-system-complete 749,34969
(defun quicklisp-system-complete-if 773,36036
(defun quicklisp-hash-system-completions-slime-loadtime 789,36879
(defcustom *mon-lisp-system-paths* 869,41475
(defun mon-add-lisp-system-paths-to-mon-lisp-system-paths 906,43665
(defun mon-add-lisp-system-paths-to-tags-table-list 940,45506
(defun mon-lisp-set-indent 975,47654
(defun mon-lisp-set-indent-hook 988,48252
(defun mon-slime-setup-add-hooks 999,48731
(defun mon-slime-ensure-file-local-variables 1046,50743
(defun mon-slime-ensure-fasl-temp-directory-exists 1066,51768
(defvar *mon-common-lisp-hyperspec-browser-function*1090,53028
(defun mon-common-lisp-hyperspec-use-dedicated-browser-p 1105,53837
(defun mon-common-lisp-hyperspec-browse-url-eww 1126,54967
(defun mon-common-lisp-hyperspec-browse-url-w3m 1147,56010
(defun mon-common-lisp-hyperspec-browse-url-set-init 1162,56859
(defun mon-slime-help-echo-overlay-no-echo 1208,59647
(defun mon-slime-setup-init 1231,61046
(defun slime-fuzzy-sroll-completions-up-from-target-buffer 1456,70870
(defun slime-fuzzy-sroll-completions-down-from-target-buffer 1463,71090
(defun mon-define-common-lisp-style 1470,71336
(defun slime-macroexpand-again-fix 1513,73143
(defun slime-highlight-sexp 1574,75836
(defun mon-clouseau-inspect 1655,79667
(defun mon-slime-compile-defun-for-debug 1688,81541
(defun mon-insert-slime-arglist 1706,82338
(defun %slime-insert-integer-at-point 1733,83285
(defun slime-insert-integer-at-point 1740,83576
(defun mon-next-xref-slime 1765,84679
(defun mon-prev-xref-slime 1779,85399
(defun mon-quit-slime-description-window 1793,86036
(defun mon-slime-description-view-source-file 1813,87097
(defvar *slime-show-description-hook* 1857,89067
(defvar *slime-local-show-description-hook* 1864,89414
(defun mon-slime-setup-show-description-buffer-locals 1872,89838
(defun mon-slime-show-description-hook-function 1884,90625
(defun mon-slime-show-description 1909,92016
(defun mon-slime-copy-presentation-at-point-to-kill-ring-no-propso 1938,93707
(defun mon-slime-copy-presentation-to-kill-ring-no-props 1951,94426
(defun mon-slime-start-sbcl 1968,95309
(defgroup slime-quicklisp-inspect 2129,103327
(defvar *slime-quicklisp-systems* 2143,104054
(defun slime-make-quicklisp-completion-table 2169,105212
(defun slime-quicklisp-get-process-start-time 2216,107796
(defun slime-quicklisp-completion-table-put-hash-meta 2246,109209
(defun slime-quicklisp-completion-table-get-hash-meta 2285,111455
(defun slime-quicklisp-completion-table-get-hash-count 2310,112661
(defun slime-quicklisp-completion-table-get-hashed-last 2337,114121
(defun slime-quicklisp-completion-table-compare-hashed-last 2358,115229
(defun slime-quicklisp-completion-table-get-ql-hash-count 2395,117327
(defun slime-quicklisp-completion-table-compare-hash-counts 2414,118281
(defun slime-get-quicklisp-system-completions 2441,119611
(defun slime-inspect-quicklisp-system 2509,123014
(defun slime-inspect-quicklisp-systems 2537,124368
(defun slime-quicklisp-open-inspector-if 2549,124940
(defun slime-inspect-quicklisp-release 2558,125411
(defun slime-inspect-quicklisp-apropos 2572,126005
(defun slime-inspect-asdf-defined-systems 2586,126655
(defun slime-inspect-asdf-system 2598,127253
(defvar *slime-echo-arglist-STFU* 2675,131151
(defun slime-echo-arglist-behave-or-back-to-your-cage 2688,131795
(defun slime-echo-arglist-STFU 2698,132321

naf-mode/mon-word-syntax-utils.el,452
(defun mon-get-syntax-at 140,4782
(defun mon-get-syntax-class-at 165,6015
(defun mon-line-test-content 196,7343
(defun mon-word-get-next 327,15721
(defun mon-word-get-list-in-buffer 356,16771
(defun mon-word-reverse-region 410,19266
(defun mon-word-iterate-over 452,20949
(defun mon-word-count-analysis 481,22203
(defun mon-word-count-occurrences 521,24279
(defun mon-word-count-region 629,30455
(defun mon-word-count-chars-region 646,31119

naf-mode/naf-mode-awards-prizes.el,137
(defvar *naf-mode-awards-prizes-xrefs*76,2644
(defvar *naf-awards-prizes-names*88,3159
(defconst naf-mode-awards-prizes-names106,3695

naf-mode/mon-image-utils.el,318
(defgroup mon-image-utils 136,4418
(defcustom *mon-image-identify-delim* 153,5223
(defun mon-image-identify 166,5756
(defun mon-image-rotate 212,7944
(defun mon-image-verify-type 234,9192
(defun mon-get-image-dimensions 307,13088
(defun mon-get-image-dimensions-im 321,13742
(defun mon-get-image-md5 343,14760

naf-mode/naf-mode-ulan-help-docs.el,46
(defun mon-help-naf-mode-ulan-flags 107,3408

naf-mode/mon-call-tree.el,157
(defvar *mon-call-tree-alist* 47,2054
(defun mon-call-tree-analyze 59,2614
(defun mon-call-tree-add 115,4784
(defun mon-call-tree-update-header 139,5754

naf-mode/mon-buffer-utils.el,974
(defgroup mon-buffer-utils 143,5100
(defcustom *mon-buffer-utils-xrefs* 162,6102
(defcustom *mon-get-hidden-buffers-known* 187,7401
(defun mon-g2be 241,9824
(defun mon-buffer-sub-no-prop 329,14227
(defun mon-buffer-sub-no-prop-check 373,16475
(defun mon-buffer-narrowed-p 522,26040
(defun mon-buffer-empty-p 580,29010
(defun mon-buffer-exists-so-kill 607,30204
(defun mon-buffer-name-is-file-name-p 628,31393
(defun mon-get-buffer-hidden 691,34712
(defun mon-get-buffer-hidden-if 749,37668
(defun mon-buffer-kill-hidden-if 769,38746
(defun mon-get-buffer-window-if 793,40057
(defun mon-print-buffer-object-readably 810,40972
(defun mon-get-buffer-w-mode 844,42682
(defun mon-buffer-check-local-value 874,44408
(defun mon-buffer-check-major-mode 907,46312
(defun mon-buffer-longlines-mode-p 927,47522
(defun mon-buffer-name->kill-ring 972,49490
(defun mon-append-to-buffer 1010,51317
(defun mon-make-shell-buffer 1046,52860
(defun mon-shell 1088,54805

naf-mode/mon-event-utils.el,1051
(defcustom *mon-popup-pos-x-offset* 155,5772
(defun mon-inhibit-read-only 167,6108
(defun mon-inhibit-modification-hooks 197,7434
(defun mon-inhibit-point-motion-hooks 214,8209
(defun mon-toggle-read-only-point-motion 237,9303
(defun mon-toggle-truncate-line 255,10087
(defun mon-scroll-down-in-place 279,11136
(defun mon-scroll-up-in-place 292,11691
(defun mon-line-move-n 311,12556
(defun mon-line-move-next 327,13298
(defun mon-line-move-prev 341,14016
(defun mon-read-keys-as-string 356,14803
(defun mon-read-multiple 398,16849
(defun mon-postion-for-x-popup-menu 493,22590
(defun mon-choose-from-menu 528,23994
(defun mon-test-keypresses 557,25260
(defun mon-decode-meta-key-event 587,26764
(defun mon-catch-meta-key 608,27664
(defun mon-abort-recursive-edit 654,29887
(defun mon-abort-autosave-when-fucked 670,30592
(defvar *mon-ascii-cursor-state* 714,33095
(defun mon-rotate-ascii-cursor 722,33479
(defun mon-kill-appending 771,35877
(defun mon-append-to-register 785,36457
(defun mon-multi-isearch-rmv-hook 806,37697

naf-mode/mon-empty-registers.el,785
(defvar *mon-register-config-tags* 142,4878
(defun* mon-set-register->tags 192,7454
(defun mon-set-register->tags-semic 228,9483
(defun mon-set-register->tags-sharp 238,9905
(defun mon-make-set-register->tags-docs 248,10326
(defun mon-set-register-tags-loadtime 295,12359
(defvar *mon-cntl-char-registers* 367,16579
(defun mon-cntl-char-registers-loadtime 386,17410
(defvar *mon-digit-registers* 449,21065
(defvar *mon-digit-shifted-registers* 474,22274
(defvar *mon-symbol-registers* 502,23711
(defvar *mon-upper-case-registers* 526,25012
(defvar *mon-lower-case-registers* 554,26377
(defvar *mon-registr-of-registers* 585,28045
(defun mon-query-replace-register1<-reg2 617,29526
(cl-defun mon-reset-registers 648,31160
(defun mon-set-all-registers-to-char 723,34304

naf-mode/mon-cl-compat-regexps.el,251
(defvar *regexp-clean-cl-symbols* 186,7814
(defvar *clean-cl-symbols-with-regexp*224,9722
(defun mon-CL-escape-star 435,19023
(defun mon-CL-escape-regexp 476,20833
(defun mon-CL-namespace-colonic 516,22843
(defun mon-CL-cln-colon-swap 532,23769

naf-mode/mon-plist-utils.el,263
(defgroup mon-plist-utils 120,3285
(defcustom *mon-plist-utils-xrefs* 135,4088
(defun mon-plist-keys 188,6177
(defun mon-plist-values 214,7299
(defun mon-plist-remove! 253,9219
(defun mon-plist-remove-consing 303,11562
(defun mon-plist-remove-if 325,12665

naf-mode/naf-mode-group-period-styles.el,48
(defconst naf-mode-group-period-styles172,4314

naf-mode/mon-seq-utils.el,2188
(defgroup mon-seq-utils 248,8020
(defcustom *mon-seq-utils-xrefs* 264,8849
(defun mon-elt-> 299,10763
(defun mon-elt-< 313,11478
(defun mon-elt->elt 329,12363
(defun mon-elt-<elt 344,13135
(defun mon-maybe-cons 378,15177
(defun mon-delq-cons 399,16237
(defun mon-list-nshuffle 435,17950
(defun mon-list-shuffle-safe 493,21190
(defun mon-delq-dups 545,23851
(defun mon-deleql-dups 576,25271
(defun mon-delete-first 608,26888
(defun mon-list-last 641,28443
(defun mon-list-make-unique 679,30160
(defun mon-remove-dups 720,32575
(defun mon-list-filter 744,33739
(defun mon-list-match-tails 775,35156
(defun mon-list-add-non-nil 808,36940
(defun mon-list-ensure 853,39287
(defun %mon-list-reorder 872,40073
(defun mon-list-reorder 896,41101
(defun mon-union 1005,47032
(defun mon-member-if 1039,48593
(defun mon-delete-if 1065,49853
(defun mon-remove-if-not 1101,51440
(defun mon-remove-if 1130,52895
(defun mon-intersection 1164,54755
(defun mon-set-difference 1260,59704
(defun mon-pairlis 1314,62392
(defun mon-map 1344,63978
(defun mon-map1 1437,69722
(defun mon-mapc 1513,73746
(defun mon-mapcar 1538,74955
(defun mon-mapcan 1580,76683
(defun mon-mapl 1620,78528
(defun mon-mapcon 1667,80735
(defun mon-maplist 1685,81777
(defun mon-subseq 1724,83856
(defun %mon-edmacro-subseq 1817,88242
(defun mon-sublist 1849,89507
(defun mon-sublist-gutted 1878,91011
(defun mon-map-append 1907,92627
(defun mon-assoc-replace 1928,93836
(defmacro mon-moveq 1955,95486
(defun mon-flatten 1979,96737
(defun mon-list-flatten-rotated 2021,98912
(defun mon-transpose 2040,99745
(defun mon-list-intersperse 2065,101013
(defun mon-every 2099,102708
(cl-defun mon-mismatch 2152,105438
(defun mon-maptree 2177,107017
(defun mon-recursive-apply 2211,108791
(defun mon-list-merge 2235,110221
(defun mon-combine 2259,111387
(defun mon-list-variant-forms 2305,113882
(defun mon-list-permute-variants 2337,115408
(defun mon-list-permute-1 2358,116414
(defun mon-list-permute-2 2394,118345
(defun mon-permute-combine 2421,119626
(defun mon-permute-combine-1 2463,121731
(defun mon-list-string-longest 2511,124241
(defun mon-bool-vector-pp 2548,126272

naf-mode/mon-randomize-utils.el,317
(defun mon-next-almost-prime 137,4454
(defun mon-gensym-counter-randomizer 191,6578
(defun mon-mix-fields 297,11804
(defun mon-make-random-state 314,12423
(defun mon-generate-prand-id 341,13572
(defun mon-generate-prand-seed 374,15040
(defun mon-string-wonkify 431,17857
(defun mon-generate-WPA-key 488,20823

naf-mode/mon-testme-utils.el,2508
(defgroup mon-testme-utils 168,6639
(defcustom *mon-testme-utils-xrefs* 184,7511
(defun mon-insert-lisp-testme 222,9714
(defun mon-insert-test-cases 297,13356
(defun mon-gensym-counter-randomizer-TEST 337,15365
(defun mon-list-nshuffle-TEST 384,17901
(defun mon-line-strings-to-list-TEST 419,19621
(defun mon-with-inhibit-buffer-read-only-PP-TEST 459,21304
(defun mon-with-inhibit-buffer-read-only-TEST 484,22494
(defun mon-line-dolines-setup-TEST 525,24555
(defun mon-line-dolines-TEST 578,27036
(defun mon-with-buffer-undo-disabled-TEST 651,30963
(defun mon-string-split-TEST 683,32544
(defun mon-line-strings-bq-qt-sym-bol-TEST 722,34557
(defun mon-help-CL-wget-pkgs-TEST 760,36459
(defun mon-build-copyright-string-TEST 821,39531
(defun google-define-get-command-TEST 910,44856
(defun mon-permute-combine-functions-TEST 934,45981
(defun mon-write-string-reset-bind-TEST 1011,49759
(defun mon-region-capitalize-TEST 1087,53475
(defun naf-mode-state-to-postal-TEST 1127,55316
(defun mon-booleanp-to-binary-TEST 1142,56025
(defun mon-sequence-all-booleanp-TEST 1178,57763
(defun mon-string-or-null-and-zerop-TEST 1227,60683
(defun mon-error-protect-PP-EXPAND-TEST 1262,62349
(defun mon-line-string-rotate-name-TEST 1280,62997
(defun mon-line-indent-from-to-col-TEST 1316,64992
(defun mon-line-strings-pipe-to-col-TEST 1360,67404
(defun mon-line-string-insert-chars-under-TEST 1395,69217
(defun mon-list-reorder-TEST 1424,70651
(defun mon-regexp-clean-ulan-dispatch-chars-TEST 1493,74607
(defun mon-set-buffer-substring-no-properties-TEST 1563,77944
(defun mon-plist-keys-TEST 1598,79420
(defun mon-plist-values-TEST 1616,80155
(defun mon-help-propertize-regexp-symbol-defs-TEST 1648,81657
(defun mon-help-regexp-symbol-defs-TEST 1688,84007
(defun mon-help-propertize-tags-TEST 1854,91289
(defun mon-help-keys-wikify-TEST 1940,96460
(defun mon-drive-transfer-template-TEST 1964,97619
(defun mon-build-mon-emacsd-example 1998,99260
(defun mon-build-misc-path-example 2044,101797
(defun mon-build-user-name-example 2134,106239
(defun mon-user-system-conditionals-TEST 2193,109354
(defun mon-build-user-name-example-TEST 2247,112635
(defun mon-cln-xml-escapes-TEST 2280,114153
(defun* mon-up/down-case-regexp-TEST 2308,115555
(defun mon-hash-get-symbol-keys-TEST 2391,119998
(defun mon-file-stamp-buffer-filename-TEST 2410,120922
(defun mon-cln-freenode-log-TEST 2437,122121
(defun mon-align-conses-EXAMPLE 2485,124517
(defun mon-align-conses-TEST 2522,126499

naf-mode/mon-type-utils-vars.el,421
(defgroup mon-type-utils-vars 126,3989
(defcustom *mon-type-utils-vars-xrefs*141,4845
(defvar *mon-special-forms-types*171,6047
(defvar *mon-non-mappable-object-types* 206,7583
(defcustom *mon-equality-or-predicate-function-types*246,9517
(defvar *mon-function-object-types* 305,11693
(defvar *mon-ascii-alpha-chars* 318,12424
(defcustom *mon-ascii-punct-chars*341,13516
(defvar *mon-whitespace-chars* 361,14407

naf-mode/smith-poster-utils.el,483
(defvar *ebay-smith-poster-path* 112,4224
(defvar *insert-smith-ebay-template* 125,4721
(defun mon-set-smith-poster-register-e 189,6939
(defalias 'mon-insert-smith-poster-template mon-insert-smith-poster-template228,8802
(defun mon-insert-smith-ebay-dbc-template 245,9647
(defun mon-make-smith-folder-list 297,12609
(defun mon-ebay-smith-posters->template 344,14767
(defun mon-cln-smith-trailing-wps-dbc-item 424,19445
(defun mon-smith-poster-dbc-item->ebay-item 436,20029

naf-mode/mon-doc-help-undocd.el,40
(defun mon-help-doc-no-docd 1600,63718

naf-mode/mon-css-color.el,3367
(defconst css-color:version 193,8299
(defgroup css-color 197,8445
(defgroup mon-css-color 211,9038
(defun css-color-turn-on-in-buffer 217,9230
(define-globalized-minor-mode css-color-global-mode 224,9436
(defcustom *css-color:hex-chars* 229,9590
(defcustom *regexp-css-color-hex* 246,10508
(defcustom *regexp-css-color-hsl* 260,11174
(defcustom *regexp-css-color-rgb* 279,12017
(defcustom *css-color:html-colors*298,12917
(defun css-color:html-color-both-cases 469,18298
(defcustom *regexp-css-color-html*490,19320
(defcustom *regexp-css-color-color* 514,20347
(defvar *css-color:keywords*544,21574
(define-minor-mode css-color-mode592,24905
(defun css-color:font-lock-hook-fun 642,27124
(defvar *css-color:map*653,27595
(defvar *css-color:generic-map* 675,28662
(defun css-color:pal-lumsig 692,29496
(defun css-color:foreground-color 701,29913
(defun css-color:normalize-hue 718,30757
(defun css-color:within-bounds 725,31100
(defun css-color:hex-to-rgb 733,31494
(defun css-color:hex-to-hsv 758,32749
(defun css-color:rgb-to-hex 769,33306
(defun css-color:rgb-to-hsv 781,33918
(defun css-color:rgb-to-hsl 814,35480
(defun css-color:hsv-to-hsl 862,37166
(defun css-color:hsv-to-hex 875,37808
(defun css-color:hsv-to-rgb 888,38446
(defun css-color:hsv-to-prop-hexstring 921,39971
(defun css-color:hsl-to-rgb-fractions 935,40719
(defun css-color:hsl-to-rgb 953,41656
(defun css-color:hsl-to-hex 972,42512
(defun css-color:hue-to-rgb 983,43095
(defun css-color:parse-hsl 1001,43922
(defun css-color:incr-hsv-hue 1015,44634
(defun css-color:incr-hsv-sat 1025,45177
(defun css-color:incr-hsv-val 1036,45774
(defun css-color:hexval-beginning 1047,46366
(defun css-color:repl-color-at-posn 1057,46734
(defun css-color:get-color-at-point 1070,47331
(defun css-color:adjust-hsv-hue-at-posn 1083,47964
(defun css-color:adjust-hsv-sat-at-posn 1094,48527
(defun css-color:adjust-hsv-val-at-posn 1105,49097
(defun css-color:what-channel 1117,49717
(defun css-color:adjust-hex-at-posn 1128,50110
(defun css-color:rgb-up 1151,51278
(defun css-color:rgb-down 1159,51624
(defun css-color:hsv-hue-up 1167,51974
(defun css-color:hsv-hue-down 1176,52355
(defun css-color:hsv-saturation-up 1185,52741
(defun css-color:hsv-saturation-down 1193,53117
(defun css-color:hsv-value-up 1201,53499
(defun css-color:hsv-value-down 1209,53865
(defun css-color:num-up 1218,54257
(defun css-color:num-down 1245,55445
(defun css-color:text-property-color-start 1268,56433
(defun css-color:text-property-color-end 1280,56955
(defun css-color:text-property-color-region 1292,57483
(defvar *css-color:string-frob* 1308,58425
(defconst *css-color:type-circle* 1322,59145
(defun css-color:next-type 1329,59459
(defun css-color:cycle-type 1337,59815
(defun css-color:string-hex-to-hsl 1365,61256
(defun css-color:string-hsl-to-rgb 1378,61959
(defun css-color:string-rgb-to-name 1393,62702
(defun css-color:string-name-to-hex 1414,63810
(defun css-color:string-rgb-to-hex 1431,64644
(defun css-color:string-hsl-to-hex 1455,65978
(defun css-color:next-channel 1467,66605
(defun css-color:hexify-anystring 1485,67416
(defun css-color:toggle-percentage 1497,67914
(defvar *css-color:fg-history* 1518,69178
(defun css-color:html-color-by-name 1527,69534
(defun css-color:examine-color 1563,71604
(defun css-color:run-tests 1591,73226

naf-mode/mon-css-check.el,719
(defgroup css-check 166,6137
(defface css-check-unapplied-face176,6587
(defface css-check-applied-face187,7039
(defvar *css-check-map* 198,7485
(defvar *css-check-follow-mode* 221,8504
(defvar *css-check-csstidy-path* 230,8990
(defvar *css-check-file* 246,9801
(defvar *CSS-CHECK* 258,10403
(defun css-check-kill-buffer-hook 273,11115
(defun css-check-toggle-follow 288,11863
(defun css-check-next-line 307,12794
(defun css-check-prev-line 323,13560
(defun css-check-goto-line-at-p 338,14221
(defun css-check-apply-line-at-p 365,15642
(defun css-check-undo-application-at-p 413,18119
(defun css-check-buffer-mode-css-p 464,20824
(defun css-check-buffer-offer-save 489,22045
(defun css-check 508,22904

naf-mode/mon-error-utils.el,984
(defgroup mon-error-utils 137,5002
(defgroup mon-error-warn 153,5840
(defcustom *mon-error-utils-xrefs* 160,6112
(defvar *mon-error-gather* 189,7707
(defcustom *mon-message-function* 200,8293
(defun mon-format 222,9370
(cl-defun mon-message 552,29726
(cl-defun mon-string-not-null-nor-zerop-ERROR 589,31739
(cl-defun mon-symbol-void-ERROR 633,34502
(cl-defun mon-vectorp-ERROR 678,37303
(cl-defun mon-file-non-existent-ERROR 715,39358
(cl-defun mon-buffer-non-existent-ERROR 748,41248
(cl-defun mon-list-proper-p-ERROR 786,43468
(defun mon-truncate-path-for-prompt 871,47004
(defun mon-display-warning 895,48158
(defun mon-error-toplevel 905,48701
(cl-defun mon-error 931,49993
(defun mon-error-string-err 996,53648
(defun mon-error-string-err-format 1024,54860
(defun mon-error-gather 1094,59160
(defun mon-error-gather-peek 1110,59935
(defun mon-error-gather-reset 1130,60857
(defun mon-error-gather-finalize 1143,61444
(cl-defun mon-write-string 1263,67134

naf-mode/mon-alphabet-list-utils.el,390
(defvar *mon-alphabet-as-type-generate* 193,7523
(defun mon-alphabet-as-type 220,9066
(defmacro mon-alphabet-as-defun 411,19018
(defun mon-alphabet-as-bc 432,20062
(defun mon-alphabet-as-map-bc 455,21134
(defun mon-alphabet-as-doc-loadtime 509,23390
(defun mon-alphabet-as-map-fun-prop 566,27048
(defun mon-alphabet-as-unintern-fun 586,28192
(defun mon-string-alpha-list 664,32355

naf-mode/naf-mode-ulan-utils.el,614
(defgroup naf-mode-ulan-help-utils 151,5392
(defcustom *mon-ulan-utils-xrefs* 163,5859
(defcustom *ulan-sample-data* 187,6828
(defvar *ulan-associative-roles* 199,7328
(defconst *naf-mode-db-numbers-flag-ulan* 213,7846
(defun mon-get-next-ulan-record 228,8512
(defconst *naf-mode-db-numbers-flag-ulan-loc-naf* 268,10442
(defconst naf-mode-db-field-flags-ulan-paren283,11256
(defun mon-rotate-ulan-triples 319,12570
(defun mon-invert-ulan-triples 336,13277
(defun mon-ulan-tsv-assc-rels-type->list 390,15261
(defconst *naf-mode-ulan-rltd-ppl-corp* 463,18313
(defconst *naf-mode-x-of-ulan-bol*499,20297

naf-mode/mon-doc-help-utils.el,8609
(defgroup mon-doc-help-utils 458,22640
(defgroup mon-doc-help-utils-faces 482,23733
(defcustom *mon-doc-help-utils-xrefs*514,25496
(defcustom *mon-doc-cookie* 612,31761
(defcustom *mon-help-docstring-help-bffr* 633,32681
(defcustom *mon-help-custom-faces-builtins-tags*648,33274
(defcustom *mon-help-mon-tags-alist* 679,35078
(defcustom *mon-help-reference-keywords* 821,41824
(defcustom *regexp-mon-doc-help-pointer-tags*890,46466
(defcustom *regexp-mon-doc-help-docstring-tags-URL*932,48126
(defcustom *regexp-mon-doc-help-docstring-tags-DYNAMIC* 973,50155
(defcustom *regexp-mon-doc-help-docstring-tags-TABLES*999,51369
(defcustom *regexp-mon-doc-help-docstring-tags*1029,52793
(defcustom *regexp-mon-doc-help-comment-tags*1056,54092
(defcustom *regexp-mon-doc-help-meta-tags*1085,55445
(defcustom *regexp-mon-doc-help-cl-tags*1106,56417
(defcustom *regexp-mon-doc-help-builtin-dynamic-tags* 1137,57913
(defcustom *regexp-mon-doc-help-builtin-static-tags*1164,59228
(defcustom *mon-help-side-effect-free* 1190,60539
(defcustom *mon-help-side-effect-and-error-free* 1279,65795
(defcustom *mon-help-pure-functions* 1350,70136
(defvar *mon-help-subrs* 1419,73655
(defvar *mon-help-subrs-false* 1437,74667
(defun mon-map-subrs-and-hash 1458,75740
(defvar *mon-help-byte-optimizer-vals* 1531,78961
(defcustom *mon-help-risky-local-variables*1551,79973
(defvar *mon-help-permanent-locals* 1577,81357
(defun mon-help-permanent-locals-find 1595,82387
(defun mon-help-byte-optimizer-find 1664,86035
(defface mon-help-KEY-tag1707,88220
(defface mon-help-DYNATAB-tag1724,89013
(defface mon-help-META-tag1741,89900
(defface mon-help-PNTR-tag1757,90663
(defface mon-help-COMMENT-tag1799,92528
(defface mon-help-INNER-KEY-tag1818,93445
(defface mon-help-URL-wrap-tag1837,94253
(defface mon-help-BUILTIN-tag1857,95090
(defface mon-help-OLAY-RESULT1885,96227
(defface mon-help-OLAY-RESULT-string-show1905,97003
(defface mon-help-OLAY-RESULT-match-show1927,97810
(defcustom *mon-help-propertize-tags-triples*1950,98696
(defun mon-help-font-lock-comment-keywords-matcher 1987,101039
(define-button-type 'help-info-monhelp-info-mon2021,102687
(defun mon-help--info-button-function 2028,102969
(defun mon-help-propertize-help-info-button 2041,103742
(defun mon-help-propertize-tags-in-buffer 2072,105660
(defun mon-help-propertize-tags 2092,106681
(cl-defun mon-help-mon-tags 2150,109874
(defun mon-help-insert-tags 2212,113043
(defun mon-help-insert-tags-comment 2272,116331
(defun mon-help-overlay-for-example 2285,117019
(defun mon-help-delimited-region 2387,123508
(defun mon-help-overlay-on-region 2463,127252
(defun mon-help-overlay-result 2486,128409
(defun mon-help-find-result-for-overlay 2546,131455
(defun mon-help-temp-docstring-display 2596,133613
(defun mon-help-buffer-spc-*DOC* 2648,136285
(defun mon-help-get-mon-help-buffer 2701,138964
(defun mon-help-view-file 2717,139614
(defcustom *mon-tags-table-list* 2749,141246
(defun mon-update-tags-tables 2783,142711
(defun mon-update-tags-tables-loadtime 2846,145785
(defun mon-tags-naf-apropos 2862,146517
(defun mon-tags-apropos 2871,146952
(defun mon-insert-doc-help-cookie 2882,147350
(defmacro mon-help-put-var-doc-val->func 2914,148752
(defmacro mon-help-swap-var-doc-const-val 2984,152691
(defun mon-help-xref-symbol-value 3141,161403
(cl-defun mon-help-function-spit-doc 3177,163375
(defun mon-insert-doc-help-tail 3304,171180
(defun mon-help-message-intrp 3414,177675
(defun mon-help-function-arity 3469,180345
(defcustom *mon-help-emacs-errors* 3523,182645
(defun mon-help-errors 3604,186751
(defun mon-help-function-args 3800,196505
(defcustom *mon-help-interactive-spec-alist* 3844,198620
(defun mon-help-parse-interactive-spec 3971,204638
(defun mon-help-insert-documentation 4029,207625
(defun mon-help-help-functions 4111,211775
(defun mon-help-mon-help 4203,214804
(defun mon-help-mon-functions 4416,220710
(defun mon-help-ebay-template-mode 5074,236911
(defun mon-help-emacs-introspect 5145,239387
(defcustom *mon-emacs-external-programs-vars* 5356,245347
(defun mon-help-package-keywords 5423,249089
(defun mon-help-regexp-syntax 5515,253334
(defun mon-help-syntax-class 5576,255995
(defun mon-help-syntax-functions 5639,258993
(defun mon-help-search-functions 5759,262426
(defun mon-help-hooks 5891,266000
(defun mon-help-file-dir-functions 6047,269945
(defun mon-help-file-dir-functions-usage 6377,278901
(defun mon-help-process-functions 6548,285190
(defun mon-help-make-network-process 6660,288097
(defun mon-help-server-functions 6745,291920
(defun mon-help-inhibit-functions 6835,294505
(defun mon-help-buffer-functions 6894,296431
(defun mon-help-frame-functions 7143,302914
(defun mon-help-window-functions 7380,308479
(defun mon-help-mode-functions 7553,313596
(defun mon-help-xml-functions 7637,316018
(defun mon-help-eieio-defclass 7682,317317
(defun mon-help-eieio-functions 7738,319818
(defun mon-help-eieio-methods 7877,326366
(defun mon-help-type-predicates 8037,335560
(defun mon-help-number-functions 8161,341418
(defun mon-help-predicate-functions 8288,343684
(defun mon-help-sequence-functions 8567,350072
(defun mon-help-key-functions 8729,353208
(defun mon-help-load-functions 9096,362835
(defun mon-help-read-functions 9176,364970
(defun mon-help-print-functions 9299,371232
(defun mon-help-marker-functions 9427,375006
(defun mon-help-hash-functions 9492,376720
(defun mon-help-plist-functions 9610,380795
(defun mon-help-plist-properties 9688,383133
(defun mon-help-faces-themes 9902,388949
(defun mon-help-faces 10022,394515
(defun mon-help-faces-basic 10162,404188
(defun mon-help-faces-font-lock 10216,406220
(defun mon-help-font-lock-functions 10261,407899
(defun mon-help-font-lock 10390,412119
(defun mon-help-overlay-functions 10457,415803
(defun mon-help-text-property-functions 10536,418264
(defun mon-help-text-property-properties 10631,425057
(defun mon-help-text-property-stickyness 10721,431746
(defun mon-help-text-property-functions-ext 10791,435466
(defun mon-help-color-functions 10852,437807
(defun mon-help-color-chart 10940,440390
(defun mon-help-easy-menu 11105,452903
(defun mon-help-widgets 11159,456345
(defun mon-help-custom-keywords 11299,466435
(defun mon-help-char-functions 11399,470599
(defun mon-help-char-charset-functions 11522,474571
(defun mon-help-char-coding-functions 11634,477781
(defun mon-help-char-table-functions 11723,481445
(defun mon-help-display-table-functions 11801,483978
(defun mon-help-char-unidata-table 11868,486296
(defun mon-help-char-composition 12004,490844
(defun mon-help-char-ascii 12174,498377
(defun mon-help-char-iso-8859-1 12266,503978
(defun mon-help-char-ecma-48 12338,508565
(defun mon-help-char-ecma-35 12396,511589
(defun mon-help-diacritics 12453,514350
(defun mon-help-char-logic 12618,519929
(defun mon-help-char-representation 12661,521550
(defun mon-help-char-raw-bytes 12824,528893
(defun mon-help-binary-representation 12901,532197
(defun mon-help-symbol-functions 13136,542308
(defun mon-help-byte-compile-functions 13455,552267
(defun mon-help-byte-code-vector-symbols 13820,564420
(defun mon-help-ipv4-header 13870,566975
(defun mon-help-nclose-functions 13969,572334
(defun mon-help-iso-8601 14025,574438
(defun mon-help-time-functions 14130,579240
(defun mon-help-mon-time-functions 14224,581905
(defun mon-help-bookmark-functions 14322,584925
(defun mon-help-info-incantation 14460,588841
(defun mon-help-tar-incantation 14481,589824
(defun mon-help-rename-incantation 14518,591174
(defcustom *regexp-clean-du-flags* 14547,592148
(defun mon-help-du-incantation 14600,594059
(defun mon-help-install-info-incantation 14653,596443
(defun mon-help-hg-archive 14686,598094
(defun mon-help-crontab 14733,600184
(defun mon-help-permissions 14818,604746
(defun mon-help-unix-commands 14909,610634
(defun mon-help-unix-usage 15089,618355
(defun mon-help-format-width 15357,634778
(defun mon-index-elisp-symbol 15387,636214
(defun mon-help-w32-functions 15408,636960
(defcustom *w32-env-variables-alist* 15464,638725
(defun mon-help-w32-env 15568,645577
(defvar *mon-help-reference-keys* 15637,648760
(defun mon-help-bind-help-keys-loadtime 16909,694876
(defun mon-help-keys 16975,698407
(defun mon-help-keys-wikify-anchors 16988,698885
(defun mon-help-keys-wikify-heading 17046,701863
(defun mon-help-keys-wikify 17074,703291
(defun mon-help-escape-for-ewiki 17193,709607
(defun mon-help-unescape-for-ewiki 17239,711506
(defun mon-help-utils-loadtime 17283,713383

naf-mode/mon-css-complete.el,4060
(defvar *css-complete-at-ids* 152,7705
(defvar *css-complete-tag-ids* 175,8777
(defvar *css-complete-media-ids* 230,11284
(defvar *css-complete-property-ids* 252,12368
(defvar *css-complete-pseudo-ids* 270,13188
(defvar *css-complete-props-and-vals* 288,13994
(defvar *css-complete-look-back-regexp* 459,23462
(defvar *css-complete-popup-pos-x-offset* 496,25301
(defmacro css-complete-collect 521,26287
(defmacro css-delete-partial 571,28569
(defmacro css-complete-menu-generate 629,31554
(defmacro css-delims-maybe-generate 652,32759
(defmacro css-popup-generate 677,33765
(defmacro css-at-p-generate 696,34705
(defun css-vals-for-prop 719,35758
(defun css-prop-for-point 732,36445
(defun css-vals-for-point 748,37214
(defun css-delims-maybe-part-generic 759,37791
(defalias 'css-delims-maybe-part-prop-at-point css-delims-maybe-part-prop-at-point780,38616
(defalias 'css-delims-maybe-part-pseudo-at-point css-delims-maybe-part-pseudo-at-point792,39141
(defalias 'css-delims-maybe-part-at-at-point css-delims-maybe-part-at-at-point804,39676
(defun css-delims-maybe-part-val-at-point 821,40354
(defun css-maybe-part-val-at-point 841,41140
(defun css-possible-value-completions 851,41613
(defun css-possible-value-completions-at-point 870,42473
(defun css-delete-partial-value 879,42909
(defun css-value-popup-completions 888,43378
(defun css-value-completion-menu 898,43876
(defun css-pos-for-x-popup-menu 916,44614
(defun css-complete-value 931,45326
(defun css-at-value-p 947,46132
(defun css-at-prop-p 963,46884
(defun css-maybe-part-prop-at-point 974,47479
(defun css-possible-prop-completions 986,47992
(defun css-possible-prop-completions-at-point 997,48496
(defun css-props-for-point 1005,48901
(defun css-delete-partial-prop 1014,49305
(defun css-prop-popup-completions 1023,49774
(defun css-prop-completion-menu 1030,50143
(defun css-complete-prop 1047,50767
(defun css-at-pseudo-id-p 1065,51652
(defun css-maybe-part-pseudo-at-point 1077,52148
(defun css-possible-pseudo-completions 1088,52661
(defun css-possible-pseudo-completions-at-point 1099,53171
(defun css-pseudos-for-point 1105,53515
(defun css-delete-partial-pseudo 1113,53867
(defun css-pseudo-popup-completions 1123,54346
(defun css-pseudo-completion-menu 1131,54768
(defun css-complete-pseudo 1146,55366
(defun css-at-tag-id-p 1161,56090
(defun css-delims-maybe-part-tag-at-point 1173,56684
(defun css-maybe-part-tag-at-point 1193,57555
(defun css-tags-for-point 1204,58058
(defun css-possible-tag-completions 1211,58365
(defun css-possible-tag-completions-at-point 1222,58865
(defun css-delete-partial-tag 1228,59196
(defun css-tag-popup-completions 1237,59640
(defun css-tag-completion-menu 1248,60169
(defun css-complete-tag 1261,60757
(defun css-at-at-id-p 1277,61541
(defun css-maybe-part-at-at-point 1287,61960
(defun css-ats-for-point 1297,62460
(defun css-possible-at-completions 1304,62765
(defun css-possible-at-completions-at-point 1315,63261
(defun css-delete-partial-at 1321,63585
(defun css-at-popup-completions 1330,64037
(defun css-at-completion-menu 1338,64403
(defun css-complete-at 1353,64968
(defun css-at-string-p 1376,66000
(defun css-at-filename-p 1384,66407
(defun css-complete-filename 1392,66789
(defun css-at-comment-p 1399,67117
(defun css-after-at-p 1407,67540
(defun css-complete-after-at 1424,68276
(defun css-media-for-point 1448,69377
(defun css-media-completion-menu 1455,69691
(defun css-complete-media 1471,70338
(defun css-media-popup-completions 1486,71015
(defun css-complete 1496,71474
(defun css-electric-left-brace 1530,73207
(defun css-electric-left-bracket 1542,73551
(defun css-electric-left-paren 1553,73856
(defun css-electric-quotes 1563,74154
(defun css-electric-semicolon 1572,74410
(define-key css-mode-map 1581,74664
(define-key css-mode-map 1582,74715
(define-key css-mode-map 1583,74777
(define-key css-mode-map 1584,74841
(define-key css-mode-map 1585,74899
(define-key css-mode-map 1586,74961
(defun mon-css-complete-loadtime 1592,75152

naf-mode/naf-mode-nation-english.el,130
(defvar *naf-mode-nation-english-xrefs* 82,2713
(defvar *naf-nation-english*102,3439
(defconst naf-mode-nation-english332,7443

naf-mode/naf-mode-art-keywords.el,123
(defvar *naf-mode-art-keywords-xrefs*79,2816
(defvar *naf-art-keywords*87,3213
(defconst naf-mode-art-keywords 153,4638

naf-mode/mon-elisp-fileset.el,36
(defun mon-map-elisp-fileset 4,113

naf-mode/mon-doc-help-tidy.el,31
(defun mon-help-tidy 108,3168

naf-mode/mon-rename-images-supplemental.el,738
(defun mon-get-buffer-parent-dir 168,7347
(defun mon-string-split-buffer-name 238,10783
(defun mon-truncate-path-for-prompt 266,12054
(defun mon-buffer-written-p 291,13212
(defun mon-toggle-read-only-point-motion 319,14562
(defun mon-dir-build-list 340,15358
(defun mon-line-bol-is-eol 402,17603
(defun mon-cln-trail-whitespace 424,18468
(defun mon-delete-back-up-list 445,19446
(defvar *mon-nef-scan-drive* 508,22172
(defvar *mon-nef-scan-path* 517,22594
(defvar *mon-nef-scan-nefs-path* 529,23139
(defvar *mon-nef-scan-nef2-path* 542,23641
(defvar *mon-ebay-images-path* 555,24156
(defvar *mon-ebay-images-bmp-path* 568,24662
(defvar *mon-ebay-images-jpg-path* 581,25232
(defvar *mon-ebay-images-lookup-path* 591,25699

naf-mode/naf-mode-abbrevs.el,74
(define-abbrev-table 'naf-mode-abbrev-tablenaf-mode-abbrev-table59,1789

naf-mode/naf-mode-classes.el,787
(defclass naf-mode-base 82,2704
(defclass naf-mode-obj-timestamp-abst-intrfc 105,3337
(defmethod naf-timestamp-on-obj 116,3715
(defclass naf-mode-obj-uid-abst-intrfc 122,3991
(defmethod naf-uid-on-obj 134,4445
(defclass naf-mode-instance-doc-abst-intrfc 140,4718
(defclass naf-mode-xrefs-keyword-abst-intrfc 151,5057
(defclass naf-mode-xrefs-face-abst-intrfc 164,5458
(defclass naf-mode-xrefs-function-abst-intrfc 177,5847
(defclass naf-mode-xrefs-constant-abst-intrfc 190,6249
(defclass naf-mode-xrefs-variable-abst-intrfc 203,6658
(defclass naf-mode-xrefs-package-abst-intrfc 216,7067
(defclass naf-mode-xrefs-abst-intrfc 229,7494
(defclass naf-mode-keyword-abst-intrfc 266,9089
(defclass naf-mode-kwrd-face-abst-intrfc 318,10711
(defclass naf-nation-english 344,11417

naf-mode/mon-macs.el,1151
(defgroup mon-macs 159,5393
(defcustom *mon-macs-xrefs* 175,6204
(defmacro mon-error-protect 203,7735
(defmacro %mon-format-chk-keys 255,10336
(defmacro handler-case 310,12977
(defmacro mon-copy-list-mac 375,16598
(defmacro mon-mapcar-mac 472,22173
(defmacro mon-nshuffle-vector 533,25503
(defmacro mon-list-sift 570,27136
(defmacro mon-foreach 619,29579
(defmacro mon-for 635,30287
(defmacro mon-loop 657,31147
(defmacro mon-equality-for-type 672,31642
(defmacro mon-gensym 707,33023
(defmacro mon-with-gensyms 746,35105
(defmacro mon-with-print-gensyms 804,37708
(defmacro defconstant 840,39156
(defmacro defparameter 867,40586
(defmacro mon-set-text-properies-region 911,42615
(defmacro mon-get-face-at-posn 931,43538
(defmacro mon-with-file-buffer 959,44731
(defmacro mon-buffer-exists-p 1000,46566
(defmacro mon-with-buffer-undo-disabled 1053,49482
(defmacro mon-print-in-buffer-if-p 1095,51391
(defmacro mon-with-inhibit-buffer-read-only 1130,52935
(defmacro mon-toggle-restore-llm 1181,55585
(defmacro mon-naf-mode-toggle-restore-llm 1241,58739
(cl-defmacro mon-line-dolines 1262,59832
(defmacro mon-cat 1301,61680

naf-mode/naf-mode-nationality-french.el,141
(defvar *naf-mode-nationality-french-xrefs*81,2661
(defvar *naf-nationality-french*100,3395
(defconst naf-mode-nationality-french180,4802

naf-mode/naf-mode-insertion-utils.el,1110
(defvar *naf-mode-insertion-utils-xrefs* 110,4178
(defun naf-tab-region 148,5629
(defun naf-comment-line 156,5873
(defun naf-uncomment-line 167,6197
(defun naf-comment-region 179,6539
(defun naf-uncomment-region 189,6895
(defun non-posting-source 200,7333
(defalias 'nps nps218,8094
(defun non-posting-ebay-source 228,8521
(defalias 'npes npes255,9699
(defun non-posting-wiki-source 263,9996
(defalias 'npws npws285,10986
(defun non-posting-philsp-source 294,11296
(defalias 'npps npps320,12450
(defun non-posting-imdb-source 331,12789
(defun non-posting-benezit-source 365,14202
(defun non-posting-internet-source 405,16436
(defun mon-insert-naf-file-in-dirs 449,19009
(defun mon-insert-naf-mode-class-template 498,21475
(defun mon-build-naf-mode-xref 526,22881
(defun mon-insert-naf-mode-xref-template 568,25124
(defun mon-insert-naf-mode-var-const-template 605,26892
(defun mon-insert-naf-mode-constant-template 651,29066
(defun mon-insert-naf-mode-face-template 691,31376
(defun mon-insert-naf-mode-faces-as-displayed 739,33916
(defvar *naf-mode-faces-as-displayed* 756,34740

naf-mode/mon-rename-whitespace-files.el,214
(defun mon-rename-whitespace-files 111,3121
(defun mon-rename-whitespace-clean-whitespace 134,4441
(defun mon-rename-whitespace-make-file-conses 152,5362
(defun mon-file-convert-find-fprint-to-fprint0 170,6398

naf-mode/naf-mode-faces.el,3984
(defcustom *naf-mode-faces-xrefs* 230,10457
(defun mon-face-bold->normal 331,13852
(defvar *naf-face-props* 343,14352
(defvar *naf-face-prop-vals* 367,15516
(defvar *naf-face-prop-keywords* 386,16507
(defvar *naf-face-vals-alist* 404,17487
(defvar *naf-face-keyword->vals* 435,19197
(defun mon-bind-naf-face-vars-loadtime 448,19869
(defun naf-facercise-prop-val 550,24948
(defun naf-face-prop-val-p 587,26952
(defun naf-map-face-key->val 635,29663
(defun mon-help-naf-mode-faces 677,31709
(defface naf-mode-db-entry-face962,40448
(defvar naf-mode-db-entry-fface 974,40944
(defface naf-mode-delim-face986,41417
(defvar naf-mode-delim-fface 998,41927
(defface naf-mode-name-divider-face1010,42402
(defvar naf-mode-name-divider-fface 1022,42920
(defface naf-mode-field-url-flag-face1034,43411
(defvar naf-mode-field-url-flag-fface 1046,43921
(defface naf-mode-delimit-url-flag-face1060,44499
(defvar naf-mode-delimit-url-flag-fface 1071,44965
(defface naf-mode-timestamp-face1085,45556
(defvar naf-mode-timestamp-fface 1099,46165
(defface naf-mode-accessed-by-face1114,46742
(defvar naf-mode-accessed-by-fface 1127,47291
(defface naf-mode-field-face1147,48042
(defvar naf-mode-field-fface 1158,48483
(defface naf-mode-db-field-entry-face1171,49032
(defvar naf-mode-db-field-entry-fface 1184,49563
(defface naf-mode-field-bnf-face 1199,50223
(defvar naf-mode-field-bnf-fface 1209,50628
(defface naf-mode-db-field-entry-bnf-face1223,51212
(defvar naf-mode-db-field-entry-bnf-fface 1234,51743
(defface naf-mode-field-ulan-face1251,52575
(defvar naf-mode-field-ulan-fface 1261,52968
(defface naf-mode-db-field-entry-ulan-face1275,53618
(defvar naf-mode-db-field-entry-ulan-fface 1285,54089
(defface naf-mode-ulan-ppl-corp-face1301,54877
(defvar naf-mode-ulan-ppl-corp-fface 1312,55335
(defface naf-mode-date-face1328,56103
(defvar naf-mode-date-fface 1344,56853
(defface naf-mode-date-active-face1361,57625
(defvar naf-mode-date-active-fface 1371,58009
(defface naf-mode-benezit-face1384,58502
(defvar naf-mode-benezit-fface 1397,59081
(defface naf-mode-place-face1410,59649
(defvar naf-mode-place-fface 1425,60329
(defface naf-mode-nationality-face1440,60964
(defvar naf-mode-nationality-fface 1452,61451
(defface naf-mode-publication-periodical-face1467,62024
(defvar naf-mode-publication-periodical-fface 1494,63220
(defface naf-mode-publication-periodical-french-face1523,64537
(defvar naf-mode-publication-periodical-french-fface 1538,65187
(defface naf-mode-publication-periodical-english-face 1557,66115
(defvar naf-mode-publication-periodical-english-fface 1570,66642
(defface naf-mode-publication-periodical-english-one-word-face1590,67576
(defvar naf-mode-publication-periodical-english-one-word-fface 1605,68249
(defface naf-mode-publication-periodical-intnl-face1626,69261
(defvar naf-mode-publication-periodical-intnl-fface 1641,69911
(defface naf-mode-event-face1659,70759
(defvar naf-mode-event-fface 1671,71241
(defface naf-mode-group-period-style-face1683,71697
(defvar naf-mode-group-period-style-fface 1694,72191
(defface naf-mode-institution-face1706,72696
(defvar naf-mode-institution-fface 1721,73398
(defface naf-mode-alternate-name-face1737,74077
(defvar naf-mode-alternate-name-fface 1750,74625
(defface naf-mode-primary-role-face1763,75175
(defvar naf-mode-primary-role-fface 1775,75660
(defface naf-mode-secondary-role-face1788,76148
(defvar naf-mode-secondary-role-fface 1800,76654
(defface naf-mode-art-keywords-role-face1813,77170
(defvar naf-mode-art-keywords-role-fface 1824,77656
(defface naf-mode-awards-prizes-face1836,78154
(defvar naf-mode-awards-prizes-fface 1847,78623
(defface naf-mode-artist-face1868,79441
(defvar naf-mode-artist-fface 1883,79979
(defface naf-mode-artist-student-of-face1900,80639
(defvar naf-mode-artist-student-of-fface 1912,81145
(defface naf-mode-artist-student-of-julian-face1934,82061
(defvar naf-mode-artist-student-of-julian-fface 1945,82551

naf-mode/mon-iptables-regexps.el,401
(defvar *mon-iptables-alist-as-sym* 122,3927
(defvar *regexp-clean-iptables* 143,4954
(defun mon-iptables-make-regexps 158,5818
(defun mon-iptables-make-regexps-long 187,7162
(defun mon-cln-iptables-short-form 214,8423
(defun mon-cln-iptables-long-form 281,11365
(defun mon-iptables-pp-key 347,14390
(defun mon-iptables-pp-as-sym 376,15728
(defun mon-bind-iptables-vars-at-loadtime 398,16496

naf-mode/mon-drive-transfer-utils.el,339
(defvar *mon-drive-transfer-template-src-dest-log* 120,3876
(defun mon-drive-transfer-template-subst-src-dest-log 179,7279
(defvar *mon-drive-transfer-template* 200,8265
(defun mon-insert-drive-transfer-template 256,11246
(defun mon-drive-transfer-template-cln-log-dest 278,12134
(defun mon-drive-transfer-template-cln-all 343,15389

naf-mode/mon-scramble-string.el,117
(defvar *mon-scramble-string-xrefs*118,3365
(defun mon-scramble-word 131,3945
(defun mon-scramble-region 153,4887

naf-mode/mon-get-freenode-lisp-logs.el,134
(defvar *freenode-lisp-logs* 120,3681
(defun mon-wget-freenode-lisp-logs 131,4222
(defun mon-get-freenode-lisp-logs-dates 166,5907

naf-mode/naf-mode-publications-periodicals-french.el,180
(defvar *naf-mode-publications-periodicals-french-xrefs*80,2641
(defvar *naf-publications-periodicals-french* 98,3464
(defconst naf-mode-publications-periodicals-french230,6483

naf-mode/mon-dbc-xml-utils.el,398
(defvar *mon-ampersand-sharp-diacritic-pairs* 109,2994
(defun mon-replace-ampersand-sharp-chars-in-buffer 163,5473
(defun mon-dbc-replace-consed-pairs-region-with-parsed-defclass-slots 179,6170
(defun mon-insert-parsed-defclass-slots 213,7723
(defalias 'mon-dbc-xml-insert-parsed-defclass-slots mon-dbc-xml-insert-parsed-defclass-slots234,8708
(defun mon-dbc-xml-parse-clean-fields 238,8908

naf-mode/mon-ps-pdf-utils.el,193
(defvar *mon-pdftotext-exec-path* 182,5420
(defvar *mon-pdfinfo-exec-path* 215,6887
(defun* mon-get-pdftotext 250,8300
(defun* mon-get-ps2ascii 329,12513
(defun* mon-get-pdfinfo 348,13481

naf-mode/mon-doc-help-CL.el,4023
(defgroup mon-doc-help-CL 204,8627
(defgroup mon-doc-help-CL-hspec-parse 221,9432
(defcustom  *mon-doc-help-CL-xrefs* 235,10067
(defcustom *mon-help-CL-cmu-ai-repo* 286,13159
(defcustom *mon-help-CL-ext-pkg-map* 326,15258
(defun mon--CL-no-pull-p 676,36414
(defcustom *mon-help-CL-ext-pkg-map-no-pull* 688,36938
(defun mon-help-CL-pkgs 719,38577
(defun mon-bind-mon-help-CL-pkgs-loadtime 761,40578
(defun mon-help-CL-wget-pkgs 822,43896
(defun mon-help-CL-wget-pkgs-for-shell-command 916,48857
(defcustom *mon-hspec-root-dir* 1176,61483
(defcustom *mon-hspec-parse-buffer* 1205,63034
(defcustom  *mon-hspec-unparse-buffer* 1225,64106
(defun mon-hspec-href-p 1243,64977
(defun mon-hspec-header-line-p 1270,66541
(defun mon-hspec-it-p 1340,71070
(defun mon-hspec-bld-p 1365,72483
(defun mon-hspec-plain-p 1390,73904
(defun mon-hspec-w3m-spec-p 1415,75309
(defun mon-hspec-prop-type 1429,76111
(defun mon-hspec-out 1459,77835
(defun mon-hspec-stk-n-mv 1476,78851
(defun mon-hspec-parse-w3m 1513,80911
(defun mon-hspec-find-w3m 1541,82363
(defun mon-hspec-unparse-w3m 1626,86879
(defun mon-hspec-unparse-w3m-to-buffer 1702,90759
(defun mon-help-CL-emacs-functions 2165,106729
(defvar *mon-help-CL-functions-to-propertize*2187,107857
(defvar *mon-help-CL-help-xref-button-type* 2213,109324
(defun mon-get-help-buffer-symbol 2227,110233
(defun mon-help-buffer-symbol-mon-help-CL-p 2236,110724
(defun mon-help-CL-make-help-xref-buttons-url 2249,111471
(define-button-type 'help-info-mon-CLhelp-info-mon-CL2280,113195
(defun mon-help-CL--help-info-mon-function 2287,113489
(defun mon-help-CL-make-help-xref-buttons-info 2303,114417
(defun mon-help-CL-make-help-xref-buttons-url-info 2350,117582
(defun mon-help-CL-file-dir-functions 2384,119717
(defun mon-help-CL-stream-keywords 2496,122895
(defun mon-help-CL-error-condition-restart 2574,126096
(defun mon-help-CL-sequence-predicates 2752,132001
(defun mon-help-CL-bit-byte-bool-logic 2788,133748
(defun mon-help-CL-loop 2908,139002
(defun mon-help-CL-loop-usage 3115,145700
(defun mon-help-CL-do 3514,161160
(defun mon-help-CL-time 3590,164616
(defun mon-help-CL-sequences 3623,166052
(defun mon-help-CL-iteration 3698,168173
(defun mon-help-CL-conses 3747,170054
(defun mon-help-CL-hash-tables 3908,173336
(defun mon-help-CL-print 3961,175618
(defun mon-help-CL-streams 4049,178753
(defun mon-help-CL-reader 4143,181731
(defun mon-help-CL-chars 4193,183652
(defun mon-help-CL-strings 4264,185835
(defun mon-help-CL-structures 4328,187927
(defun mon-help-CL-arrays 4360,189404
(defun mon-help-CL-numbers 4441,192029
(defun mon-help-CL-lambda-list 4652,198988
(defun mon-help-CL-object-CLOS 4763,204046
(defun mon-help-CL-method-combination 4852,206912
(defun mon-help-CL-control-flow 4928,209729
(defun mon-help-CL-eval-compile 5028,212096
(defun mon-help-CL-load-compile 5087,213956
(defun mon-help-CL-environment 5128,215610
(defun mon-help-CL-package-functions 5188,217506
(defun mon-help-CL-intern-symbol 5248,219483
(defun mon-help-CL-types 5299,221294
(defun mon-help-CL-type-declarations 5532,227172
(defun mon-help-CL-sharpsign-syntax 5573,229056
(defun mon-help-CL-format 5626,231824
(defun mon-help-CL-format-usage 5821,237334
(defun mon-help-slime-functions 5943,240749
(defun mon-help-CL-slime-keys 7108,270366
(defun mon-help-CL-swank-functions 7242,274994
(defun mon-help-CL-local-time 7285,276437
(defun mon-help-CL-minion 7432,282759
(defvar *clhs-symbol-v3-or-v7* 7518,286662
(defun mon-help-utils-CL-loadtime 9539,391271
(defvar *mon-help-CL-symbols-for-info* 9565,392525
(defvar *mon-help-CL-symbols-html* 9583,393443
(defun mon-help-CL--help-info-mon-symbols-hash-table 9606,394646
(defun mon-help-CL-symbols-info 9714,399475
(defun mon-help-CL-symbols-html 9740,400913
(defun mon-help-CL-symbols 9802,404795
(defun mon-cln-cxml-docs 9862,408128
(defun mon-help-CL-lispdoc 9921,410698
(defun mon-cln-ansi-info 9981,413934
(defcustom *mon-CL-indent-specs* 10032,416199

naf-mode/mon-region-utils.el,533
(defun mon-region-position 143,4983
(defun mon-region-length 183,7043
(defun mon-decode-coding-region-utf-8-unix 212,8462
(defun mon-region-indent-refill 230,9245
(defun mon-region-unfill 288,12886
(defun mon-region-capitalize 300,13337
(defun mon-region-reverse 334,14893
(defun mon-wrap-md-code-block 356,15878
(defun mon-wrap-selection 367,16248
(defun mon-wrap-text 403,17748
(defun mon-wrap-with 434,19069
(defun mon-region-split-commas 446,19685
(defun mon-align-conses 502,21960
(defun mon-sha1-region 530,23360

naf-mode/naf-mode-french-months.el,42
(defconst naf-mode-french-months 84,3041

naf-mode/mon-dir-utils-local.el,1236
(defvar *mon-img-hash* 169,6536
(defvar *mon-nef-img-hash* 188,7315
(defvar *mon-bmp-img-hash* 207,8193
(defvar *mon-jpg-img-hash* 226,9053
(cl-defun mon-file-map-elisp-fileset 250,10113
(defun mon-dir-save-current 362,16488
(defun mon-dir-save-current-to-file 398,18190
(defun mon-explorer-naf-artist 446,20332
(defun mon-explorer-naf-brand 475,21690
(defun mon-dired-naf-artist-letter 507,23340
(defun mon-dired-naf-brand-letter 533,24523
(defun mon-dired-naf-image-dir 569,26277
(defun mon-dir-nef-update-photos-alist 614,28728
(defun mon-bind-nefs-photos-at-loadtime 676,32244
(defun mon-dir-nef-ranges 703,33537
(defun mon-dir-nef-name-to-head 736,35422
(defun mon-dir-nef-remove-if-empty 762,36773
(defun mon-dir-nef-find-dups 794,38547
(defun mon-dir-nef-conc-dups 833,40658
(defun mon-dir-nef-converge 866,42427
(defun mon-dir-nef-conc-ranges 901,44270
(defun mon-dir-nef-keep-3 931,45844
(defun mon-dir-nef-big 976,48372
(defun mon-dired-nef-dir 1000,49455
(defun mon-dir-hash-images 1030,50864
(defun mon-dir-hashed-complete 1086,53399
(defun mon-dir-try-comp 1113,54755
(defun mon-file-path-for-bug 1150,56494
(defun mon--local-url-for-bug 1202,59312
(defun mon-get-local-url-for-bug 1207,59556

naf-mode/mon-wget-utils.el,368
(defvar *mon-show-wget-script-temp* 116,3454
(defun mon-wget-list-to-script 126,3969
(defun mon-wget-list-to-script-TEST 180,6629
(defun mon-wget-list-to-script-shell-command 235,9604
(defun mon-wget-list-give-script-to-shell-command 272,11695
(defun mon-wget-rfc 311,13703
(defun mon-wget-unicodedata-files 342,15099
(defvar *mon-unidata-file-list* 391,17671

naf-mode/mon-regexp-symbols.el,2562
(defgroup mon-regexp-symbols 161,6341
(defcustom *mon-regexp-symbols-xrefs* 178,7228
(defcustom *regexp-whitespace-chars*211,9251
(defcustom *regexp-clean-xml-parse* 235,10431
(defcustom *regexp-clean-mon-file-keywords*261,11649
(defcustom *regexp-symbol-defs* 357,15455
(defcustom *regexp-symbol-defs-big* 406,17961
(defcustom *regexp-ansicl-info*459,20607
(defcustom *regexp-line-to-consed-pair* 490,21760
(defcustom *regexp-abrv-dotted-month->canonical*503,22384
(defcustom *regexp-simple-abrv-month->canonical*531,23975
(defcustom *regexp-clean-ebay-time-chars* 558,25474
(defcustom *regexp-clean-ebay-month->canonical-style1*599,27046
(defcustom *regexp-clean-ebay-month->canonical-style2* 638,28665
(defcustom *regexp-clean-ebay-month->canonical-style3* 678,30461
(defcustom *regexp-bound-month->canonical*726,33010
(defcustom *regexp-month->canonical-ws*754,34412
(defcustom *regexp-month->MM*825,38243
(defcustom *regexp-MM->month*849,39408
(defcustom *regexp-MM->month-whitespace-aware*872,40668
(defcustom *regexp-philsp-months*944,45071
(defcustom *regexp-philsp-apos*975,46548
(defcustom *regexp-philsp-location*998,47575
(defcustom *regexp-philsp-swap-location*1022,48680
(defcustom *regexp-philsp-fix-month-dates* 1041,49562
(defcustom *regexp-clean-irc-logs* 1073,51559
(defcustom *regexp-clean-wikipedia*1089,52358
(defcustom *regexp-clean-whitespace*1179,56047
(defcustom *regexp-clean-big-whitespace*1200,56933
(defcustom *regexp-clean-imdb*1222,57922
(defcustom *regexp-clean-loc*1247,58918
(defcustom *regexp-clean-gilt-group* 1297,62095
(defcustom *regexp-ital-to-eng* 1318,62946
(defcustom *regexp-defranc-dates*1353,64486
(defcustom *regexp-defranc-places* 1418,67451
(defcustom *regexp-defranc-benezit*1556,72023
(defcustom *regexp-clean-benezit-fields*1636,74947
(defcustom *regexp-german-to-eng*1670,76509
(defcustom *regexp-clean-bib*1696,77549
(defcustom *regexp-common-abbrevs*1726,78667
(defcustom *regexp-wrap-url-schemes* 1791,81291
(defcustom *regexp-rgb-hex*1842,84108
(defcustom *regexp-percent-encoding-reserved-chars*1881,86099
(defvar *regexp-cp1252-to-latin1*1904,87150
(defconst *google-define-html-entry-table*1927,88424
(defvar *regexp-clean-html-decimal-char-entity* 2015,94120
(defvar *regexp-clean-html-named-char-entity* 2044,95736
(defvar *regexp-clean-ulan-diacritics*2072,97264
(defvar *regexp-clean-ulan*2156,102410
(defvar *regexp-clean-ulan-fields*2203,105081
(defvar *regexp-clean-ulan-dispatch-chars* 2311,110091
(defvar *regexp-ulan-contribs* 2356,112509

naf-mode/mon-rename-image-utils.el,1051
(defun mon-get-ebay-bmps-in-dir 433,18610
(defun mon-get-nefs-in-dir 456,19709
(defun mon-insert-ebay-bmps-in-file 474,20672
(defun mon-get-ebay-jpgs-list 495,21605
(defun mon-insert-ebay-jpgs-in-file 522,22888
(defun mon-get-ebay-jpgs-count 540,23711
(defun mon-get-ebay-bmps-count 557,24412
(defun mon-get-ebay-img-count-verify 574,25115
(defun mon-cln-img-magic-hex 598,26181
(defun mon-get-ebay-img-css 657,29191
(defun mon-get-ebay-img-name-to-col 717,32164
(defun mon-get-ebay-css-pp-region-to-file 744,33188
(defun mon-get-ebay-css-pp 779,34699
(defun mon-insert-css-colors 839,36905
(defun mon-rename-imgs-in-dir 883,38986
(defun mon-check-image-type 941,41820
(defun mon-ebay-image-directory-not-ok 962,42823
(defun mon-ebay-image-directory-ok-p 999,44453
(defun mon-image-rename-propertize 1064,47252
(defun mon-parse-rename-images 1180,54898
(defun mon-shorten-rename-image-path 1198,55762
(defun mon-parse-rename-lengths 1210,56402
(defun mon-pad-rename-lengths 1240,57839
(defun mon-build-rename-buffer 1318,62390

naf-mode/mon-dir-utils.el,2652
(defgroup mon-dir-utils 271,13452
(defcustom *mon-dir-utils-xrefs* 293,14543
(defcustom *mon-add-subdirs-to-list-ignorables*338,17221
(defcustom *regexp-add-subdirs-to-list-filter-ignorables* 360,18371
(defun mon-file-truename-p 389,19987
(defun mon-file-dir-attributes->plist 515,26305
(defun mon-file-ensure-extension-is-el 588,30126
(defun mon-file-get-load-history-if 636,33002
(defun mon-ffap-view-file 697,36526
(defun mon-ffap-view-file-other-window 716,37285
(defun mon-find-buffer-visiting-other-live-frame 736,38141
(defun mon-dired-find-file-other-frame 790,40280
(defun mon-copy-file-dired-as-list 817,41846
(defun mon-copy-file-dired-as-string 843,43085
(defun mon-toggle-dired-dwim-target 877,44788
(defun mon-dired-buffers-complete 907,46118
(defun mon-dired-other-window 1081,55790
(defun mon-dired-srt-alph 1094,56467
(defun mon-dired-srt-chrn 1105,56991
(defun mon-dired-srt-type 1116,57537
(defun mon-dired-srt-type-alph 1127,58055
(defun mon-dired-srt-type-chrn 1138,58591
(defun mon-dired-up-directory-this-buffer 1153,59327
(defun mon-dired-uninsert-subdir 1170,60070
(defun mon-dired-uninsert-subdir-all 1190,61085
(defun mon-dired-insert-dirs-recursive 1214,62259
(defun mon-dired-unmark-elc 1225,62831
(defun mon-async-du-dir 1258,64504
(defun mon-get-dir-size 1288,65856
(defun mon-dir-make-xargs-arg-file 1322,67505
(defun mon-get-new-buffer-w-stamp 1361,69698
(defun mon-get-dir-name-absolute 1416,72665
(defun mon-get-relative-w-absolute 1448,74315
(defun mon-copy-files-in-sub-dirs 1500,77321
(defun mon-copy-file-multiple 1568,81154
(cl-defun mon-file-reduce-name 1596,82517
(defun mon-build-path 1645,84947
(defun mon-buffer-written-p 1717,88821
(defun mon-string-split-buffer-name 1748,90383
(defun mon-string-split-buffer-parent-dir-quick 1777,91745
(defun mon-string-split-buffer-parent-dir 1802,92955
(defun mon-get-buffer-parent-dir 1847,95314
(defun mon-string-split-pathname 1912,98722
(defun mon-string-split-dir-recurse 1965,101709
(defun mon-dir-common-paths 2029,105323
(defun mon-dir-get-subdirs 2063,107083
(defun %mon-dir-get-subdirs-filter-full 2103,109459
(defun %mon-dir-get-subdirs-filter-no-full 2119,110334
(defun mon-add-subdirs-to-list 2140,111483
(defun mon-find-file 2223,116377
(defun mon-insert-subdirs-in-buffer 2245,117216
(defun mon-get-dir-subdir-default 2278,118866
(defun mon-rename-file-serial 2331,121694
(defun mon-copy-file-path 2376,123563
(defun mon-get-buffers-directories 2456,127490
(defun mon-proc-buffers-directories 2507,130218
(defun mon-get-proc-buffers-directories 2566,132868
(defun mon-dir-build-list 2643,136571

naf-mode/naf-mode-publications-periodicals-english.el,323
(defvar *naf-mode-publications-periodicals-english-xrefs*83,2720
(defvar *naf-publications-periodicals-english* 101,3543
(defconst naf-mode-publications-periodicals-english419,12228
(defvar *naf-publications-periodicals-english-one-word* 434,13038
(defconst naf-mode-publications-periodicals-english-one-word455,13431

naf-mode/naf-mode-db-flags.el,513
(defvar *naf-mode-db-flags-xrefs* 141,4726
(defconst naf-mode-timestamp-flag 162,5462
(defconst naf-mode-accessed-by-flag194,6817
(defconst naf-mode-url-flag 242,8757
(defconst naf-mode-url-wrapper-flag 272,9997
(defconst naf-mode-db-numbers-flag290,10930
(defconst naf-mode-db-field-flags-bnf346,13182
(defconst naf-mode-db-field-flags367,14144
(defvar naf-alternate-name-flags381,14758
(defconst naf-mode-alternate-name-flags 405,16034
(defvar *naf-x-of*422,16796
(defconst *naf-mode-x-of*458,18478

naf-mode/mon-jg-directory-creator.el,173
(defvar *mon-jg-file-template* 113,3445
(defun* mon-make-jg-dir-in-path 146,4841
(defun mon-write-jg-file-in-path 242,9611
(defun mon-format-jg-file-for-write 267,10917

naf-mode/naf-mode-xrefs.el,80
(defgroup naf-mode-xrefs 112,3241
(defcustom *naf-mode-xref-of-xrefs*122,3694

naf-mode/mon-utils.el,1824
(defgroup mon-base 469,25872
(defgroup mon-xrefs 485,26700
(defvar *mon-utils-post-load-requires* 545,30109
(defcustom *mon-xrefs-xrefs*613,32583
(defcustom *mon-default-comment-start* 646,34548
(defcustom *mon-default-comment-divider* 684,36578
(defcustom *mon-timestamp-cond* 698,37228
(defvar *mon-recover-nil-t-default-plist* 711,37939
(defun mon-recover-nil-t-default-plist 725,38748
(defmacro mon-check-feature-for-loadtime 766,41258
(defun mon-utils-require-features-at-loadtime 819,43931
(defun mon-after-mon-utils-loadtime 845,45306
(defun mon-match-at-point 940,50915
(defun mon-looking-back-p 977,52497
(defun mon-string-read-match-string 1016,54216
(defun mon-view-help-source 1061,56415
(defun mon-map-obarray-symbol-plist-props 1090,57858
(defun mon-escape-lisp-string-region 1159,61909
(defun mon-unescape-lisp-string-region 1231,64731
(defun mon-reescape-lisp-string-region 1265,66007
(defun mon-quote-sexp 1281,66760
(defun mon-toggle-eval-length 1305,67651
(defun mon-pretty-print-sexp-at-point 1345,69453
(defun mon-princ-cb 1406,72023
(defun mon-eval-sexp-at-point 1420,72624
(defun mon-eval-print-last-sexp 1447,73756
(defun mon-eval-expression 1460,74243
(defun mon-extend-selection 1496,75856
(defun mon-list-fonts-display 1520,76745
(defun mon-font-at-point 1569,78933
(defun mon-semnav-up 1581,79455
(defun mon-show-columns 1601,80026
(defun mon-nuke-and-eval 1636,81751
(defun mon-unbind-defun 1672,83324
(defun mon-unbind-symbol 1685,83932
(defun mon-unbind-function 1698,84542
(defun mon-unbind-command 1708,85014
(defun mon-unbind-variable 1718,85480
(defun mon-dump-object-to-file 1740,86550
(defun mon-byte-compile-and-load 1772,88112
(defun mon-compile-when-needed 1790,88972
(defun mon-load-or-alert 1818,90501
(defun mon-erc-query-user 1842,91635

naf-mode/mon-window-utils.el,522
(defgroup mon-window-utils 143,4893
(defcustom *mon-window-utils-xrefs*159,5700
(defun mon-frame-live-visible-graphic-p 180,6750
(defun mon-map-windows->plist 209,8264
(defun mon-twin-horizontal 281,12077
(defun mon-twin-vertical 291,12411
(defun mon-toggle-menu-bar 302,12727
(defun mon-scratch 318,13399
(defun mon-switch-to-messages 340,14399
(defun mon-kill-completions 349,14747
(defun mon-delete-completion-window 362,15202
(defun mon-temp-buffer-show-finish 395,17122
(defun mon-flip-windows 416,18274

naf-mode/naf-mode-publications-periodicals-intnl.el,177
(defvar *naf-mode-publications-periodicals-intnl-xrefs*98,3217
(defvar *naf-publications-periodicals-intnl*117,4070
(defconst naf-mode-publications-periodicals-intnl175,6955

naf-mode/mon-doc-help-char-encoding-lossage.el,878
(defgroup mon-doc-help-char-encoding-lossage 133,4348
(defun mon-make-encoding-position-lossage-table 145,4962
(defcustom *mon-doc-help-char-encoding-lossage-xrefs*186,7359
(defcustom *8859-1-8859-15-lossage*214,8785
(defcustom *8859-1-8859-15-lossage-rules*245,10624
(defcustom *cp1252-8859-15-lossage*260,11279
(defcustom *cp1252-8859-15-lossage-rules*294,13438
(defcustom *cp1252-8859-1-lossage*311,14192
(defcustom *cp1252-8859-1-lossage-rules*341,16078
(defun mon-get-encoding-codepoint 357,16884
(defun mon-get-encoding-position-lossage 418,21010
(defun mon-get-encoding-point-hist 458,23722
(defun mon-get-encoding-map-results 492,25706
(cl-defun mon-get-encoding-point-hist-map-plists 522,27308
(defun mon-help-cp1252-iso-8859-1-lossage 567,29880
(defun mon-help-iso-8859-1-8859-15-lossage 593,31338
(defun mon-help-cp1252-iso-8859-15-lossage 618,32712

naf-mode/mon-word-count-utils.el,452
(defun mon-get-syntax-at 116,3107
(defun mon-get-syntax-class-at 141,4340
(defun mon-line-test-content 172,5668
(defun mon-word-get-next 303,14046
(defun mon-word-get-list-in-buffer 332,15096
(defun mon-word-reverse-region 386,17591
(defun mon-word-iterate-over 428,19274
(defun mon-word-count-analysis 458,20612
(defun mon-word-count-occurrences 498,22688
(defun mon-word-count-region 607,28892
(defun mon-word-count-chars-region 624,29556

naf-mode/naf-mode-db-fields.el,252
(defconst naf-mode-delim 119,4861
(defconst naf-mode-comment-delim 132,5440
(defconst naf-mode-name-divider 145,6076
(defconst naf-mode-db-entry 200,7741
(defconst naf-mode-field-names-bnf434,15815
(defconst naf-mode-db-field-flags-bnf 464,17240

naf-mode/mon-bzr-utils.el,351
(defgroup mon-bzr-utils 116,3377
(defcustom *mon-bzr-utils-xrefs* 140,4523
(defun mon-help-bzr-topics 184,6374
(defun mon-help-bzr-usage 311,13423
(defun mon-help-bzr-aliases 358,15535
(defun mon-help-bzr-init 387,16433
(defun mon-bzr-log-last 619,24697
(defvar *mon-hgignore-template* 631,25209
(defun mon-insert-hgignore-template 783,29878

naf-mode/naf-mccarthy-facts.el,454
(defun facts 22,1143
(defun period 237,10612
(defun rot 243,10775
(defun mvmult 248,10916
(defun vplus 252,11038
(defun vminus 256,11172
(defun scap 260,11311
(defun svmult 264,11440
(defun addup 267,11542
(defconst zerovec 273,11652
(defun length 276,11737
(defconst Imatrix 278,11806
(defun smmult 280,11867
(defun mplus 283,11964
(defun mminus 286,12076
(defun mmult 289,12191
(defun multiplyup 294,12381
(defun wind-power 337,13431

naf-mode/naf-mode-city-names-us.el,79
(defvar *naf-city-names-us*92,3341
(defconst naf-mode-city-names-us 209,5411

naf-mode/mon-doc-help-pacman.el,199
(defvar *regexp-clean-pacman-Q* 110,3360
(defun mon-help-pacman-Q 150,5723
(defvar *regexp-clean-pacman-S* 268,11780
(defun mon-help-pacman-S 313,14579
(defun mon-help-pacman-commands 450,21859

naf-mode/naf-mode-state-names.el,83
(defvar *naf-mode-state-to-postal*82,2967
(defconst naf-mode-state-names146,4816

naf-mode/mon-boxcutter.el,754
(defgroup mon-boxcutter 245,9887
(defcustom *boxcutter-conversion-program* 264,10963
(defcustom *boxcutter-path* 286,12379
(defcustom *boxcutter-captures* 312,13573
(defcustom *boxcutter-title-bar-vig* 336,14633
(defcustom *boxcutter-counter* 355,15433
(defcustom *boxcutter-tstamp* 364,15787
(defvar *boxcutter-captured-last* 375,16239
(defun boxcutter-gen-tstamp 384,16690
(defun boxcutter-incr-cntr 395,17131
(defun boxcutter-mkdir-loadtime 412,17829
(defun boxcutter-gen-fname 430,18786
(defun boxcutter-big-n-small 469,20828
(defun boxcutter-get-win-coords 500,22354
(defun boxcutter-get-frame-coords 553,24987
(defun* boxcutter-capture 596,27086
(defun boxcutter-capture-set-crop 672,30819
(defun boxcutter-call-convert 688,31451

naf-mode/mon-iptables-vars.el,39
(defconst *mon-iptables-alst*114,3334

naf-mode/mon-env-proc-utils.el,568
(defgroup mon-env-proc-utils 137,4721
(defcustom *mon-env-proc-utils-xrefs* 154,5595
(defun mon-get-system-specs 178,6988
(defun mon-get-env-vars-symbols 212,8486
(defun mon-get-env-vars-strings 245,10187
(defun mon-get-env-vars-emacs 291,12390
(defun mon-get-sys-proc-list 381,17122
(defun mon-insert-sys-proc-list 407,18298
(defun mon-get-proc-w-name 428,19155
(defun mon-get-process 471,21386
(defun mon-escape-string-for-cmd 519,23631
(defun mon-terminal 539,24668
(defun mon-cmd 558,25644
(defun mon-firefox 577,26551
(defun mon-conkeror 588,26972

naf-mode/naf-mode-english-roles.el,145
(defgroup naf-mode-english-roles 90,3034
(defconst naf-mode-english-roles-primary204,5770
(defconst naf-mode-english-roles-secondary624,15215

naf-mode/mon-doc-help-utils-supplemental.el,275
(defun mon-comment-divider 165,6325
(defun mon-insert-lisp-testme 195,7559
(defvar *regexp-symbol-defs* 282,11569
(defun mon-string-index 336,14306
(defun mon-string-upto-index 357,15420
(defun mon-string-after-index 371,16134
(defun mon-string-justify-left 392,17343

naf-mode/naf-skeletons.el,229
(define-skeleton book-naf128,4487
(define-skeleton artist-naf202,5760
(define-skeleton people-naf253,6587
(define-skeleton author-naf307,7352
(define-skeleton brand-naf357,8060
(define-skeleton benezit-naf-template417,8937

naf-mode/mon-string-utils.el,1273
(defgroup mon-string-utils 169,6413
(defcustom *mon-string-utils-xrefs* 183,7219
(defun mon-string-split 212,8912
(defun mon-string-spread 272,12488
(defun mon-string-justify-left 370,17171
(defun mon-string-fill-to-col 476,22640
(defun mon-string-index 495,23445
(defun mon-string-upto-index 529,24931
(defun mon-string-after-index 542,25625
(defun mon-string-sort-descending 557,26370
(defun mon-string-position 576,27344
(defun mon-string-has-suffix 590,28074
(defun mon-string-chop-spaces 652,31659
(defun mon-string-ify-list 674,32711
(defun mon-string-split-on-regexp 696,33668
(defun mon-string-replace-char 724,35014
(defun mon-string-sub-old->new 745,36068
(defun mon-string-repeat 784,38134
(defun mon-string-to-hex-list-cln-chars 821,39734
(cl-defun mon-string-to-hex-string 848,41146
(defun mon-string-from-hex-list 897,43639
(defun mon-string-to-hex-list 931,45296
(defun mon-string-infix 972,47368
(defun mon-string-explode 1004,49056
(defun mon-string-permute 1022,49838
(defun mon-string-permute-line 1065,51815
(defun mon-string-splice-sep 1104,53396
(defun mon-string->strings-splice-sep 1179,57254
(defun mon-string-to-regexp 1217,59245
(defun mon-string-match-in-list-p 1251,60930
(defun mon-string-convert-loc 1269,61652

naf-mode/mon-get-mon-packages.el,68
(defvar *mon-el-library*92,2713
(defun mon-wget-mon-pkgs 237,6745

naf-mode/naf-mode-dates.el,978
(defgroup naf-mode-dates 140,4697
(defcustom *naf-mode-date-xrefs* 150,5151
(defcustom naf-weekday-alist183,6248
(defcustom naf-month-abbrev-alist 228,7951
(defcustom naf-mode-english-dates294,10771
(defcustom naf-mode-english-days350,12946
(defcustom naf-mode-french-dates386,14222
(defcustom naf-mode-french-days437,16200
(defcustom naf-mode-simple-date 470,17233
(defcustom naf-mode-year-range485,17877
(defcustom naf-mode-date-string513,18801
(defcustom naf-mode-lifespan 545,19970
(defcustom naf-mode-circa-dates560,20658
(defcustom naf-mode-benezit-date 595,21900
(defcustom naf-active-date-flags 609,22393
(defcustom naf-mode-active-date633,22961
(defcustom naf-active-date-flags-paren 649,23557
(defcustom naf-mode-active-date-flags-paren 677,24162
(defcustom naf-active-date-flags-solo 696,25065
(defcustom naf-mode-active-date-flags-solo 710,25501
(defcustom *regexp-french-date-prefix* 725,26084
(defcustom *regexp-french-date-siecle* 758,26940

naf-mode/naf-mode-students-of-julian.el,1202
(defvar *naf-mode-students-of-julian-xrefs* 109,3843
(defvar *naf-students-of-julian-french*133,4705
(defconst naf-mode-students-of-julian-french 206,9120
(defvar *naf-students-of-julian-us*228,9940
(defconst naf-mode-students-of-julian-us266,11643
(defvar *naf-students-of-julian-germany*287,12408
(defconst naf-mode-students-of-julian-germany302,12960
(defvar *naf-students-of-julian-brazil*324,13784
(defconst naf-mode-students-of-julian-brazil335,14203
(defvar *naf-students-of-julian-canada*356,15012
(defconst naf-mode-students-of-julian-canada376,15833
(defvar *naf-students-of-julian-misc*397,16640
(defconst naf-mode-students-of-julian-misc435,19653
(defvar *naf-students-of-julian-finland*456,20440
(defconst naf-mode-students-of-julian-finland465,20765
(defvar *naf-students-of-julian-norway*486,21586
(defconst naf-mode-students-of-julian-norway 498,22039
(defvar *naf-students-of-julian-uk*519,22854
(defconst naf-mode-students-of-julian-uk531,23277
(defvar *naf-students-of-julian-russia*552,24041
(defconst naf-mode-students-of-julian-russia564,24529
(defvar *naf-students-of-julian-switzerland*585,25338
(defconst naf-mode-students-of-julian-switzerland597,25770

naf-mode/naf-mode-institution.el,674
(defvar *naf-mode-institution-xrefs* 94,3103
(defconst naf-mode-benezit-museum-short 116,3961
(defvar *naf-institution-museum-names*136,4818
(defconst naf-mode-institution-museum-names 181,6246
(defvar *naf-institution-names-anchored*201,6979
(defconst naf-mode-inst-names-anchored 305,9654
(defvar *naf-institution-names-generic* 322,10451
(defconst naf-mode-institution-names-generic 354,11359
(defvar *naf-academy-name* 370,12012
(defconst naf-mode-academy-names 399,13197
(defvar *naf-school-names-intnl*419,13900
(defconst naf-mode-school-names-intnl 460,15971
(defvar *naf-school-names-english*477,16690
(defconst naf-mode-school-names-english 517,18149

naf-mode/mon-tramp-utils.el,638
(defvar *mon-tramp-mode-line-buffer-ident* 262,10343
(defvar *mon-tramp-putty-private-keys* 293,11917
(defvar *mon-tramp-paths-alist* 314,12994
(defvar *mon-tramp-default-methods-l* 342,14621
(defun mon-tramp-plink-example 386,17305
(defun mon-tramp-add-default-methods 417,19017
(defun mon-tramp-utils-loadtime 440,20313
(defun mon-tramp-putty-conf-status 450,20706
(defun mon-tramp-add-pageant-keys 482,22312
(defun mon-ssh-add-p 517,23980
(defun mon-tramp-read-conns 535,24757
(defun mon-tramp-connect 567,26327
(defun mon-tramp-disconnect 582,26944
(defun mon-tramp-su-local 596,27535
(defun mon-tramp-syntax 623,28635

naf-mode/mon-insertion-utils.el,2631
(defgroup mon-insertion-utils 210,9205
(defcustom *mon-insertion-utils-xrefs*226,10035
(defun mon-insert-dirs-in-path 264,12213
(defun mon-insert-file-in-dirs 293,13704
(defun mon-insert-whitespace 370,17684
(defun mon-insert-newlines 394,18869
(defun mon-insert-string-n-fancy-times 421,20167
(defun mon-insert-string-n-times 557,27379
(defun mon-line-number-region 602,29373
(defun mon-string-incr 633,30799
(defun mon-insert-string-ify 786,39223
(defun mon-insert-unicode 804,40115
(defun mon-split-designator 895,45439
(defun mon-comment-divider 916,46223
(defun mon-comment-divider-to-col 944,47593
(defun mon-comment-lisp-to-col 1045,53135
(defun mon-comment-divider-to-col-four 1065,54171
(defun mon-insert-php-comment-divider 1082,54819
(defun mon-insert-user-name-cond 1097,55506
(defun mon-insert-system-type-cond 1130,57047
(defun mon-insert-regexp-template 1151,58002
(defun mon-insert-regexp-template-yyyy 1170,58910
(defun mon-lisp-CL-package-complete 1217,61161
(defun mon-insert-lisp-CL-mode-line-template 1252,62926
(defun mon-insert-lisp-CL-file-template 1353,68216
(defun mon-insert-lisp-CL-package-template 1433,72359
(defun mon-insert-lisp-CL-eval-when 1523,77560
(defun mon-insert-lisp-CL-debug 1565,79517
(defun mon-insert-lisp-doc-eg-xref 1597,81085
(defun mon-insert-lisp-fundoc-eg-xref 1683,85646
(defun mon-insert-lisp-CL-jump-doc 1720,87529
(defun mon-insert-lisp-CL-eol-tilde 1849,94663
(defun mon-insert-lisp-CL-eol-tilde-no-at 1873,95714
(defun mon-insert-lisp-stamp 1898,96821
(defun mon-build-copyright-string 1929,98373
(defun mon-insert-copyright 2019,103412
(defcustom *mon-github-username-for-pathname* 2091,107073
(defcustom *mon-github-repository-name-for-pathname* 2110,108043
(defcustom *mon-github-repository-default-pathname* 2131,109035
(defcustom *mon-github-pathname-url* 2165,111078
(defun mon-build-github-default 2201,113002
(defun mon-build-github-repo-path-defaults 2240,115165
(defun mon-insert-file-template 2320,119846
(defvar *mon-gnu-license-header* 2430,125481
(defvar *mon-gnu-license-header-emacs* 2465,127279
(defvar *mon-mit-license-header* 2487,128307
(defcustom *mon-bsd-license-header-COPYRIGHT-HOLDER* 2528,130523
(defvar *mon-bsd-license-header* 2546,131545
(defvar *mon-gnu-license-header-gfdl* 2601,134605
(defun mon-build-copyright-string-license 2634,136402
(defun mon-insert-gnu-licence 2690,139446
(defun mon-insert-gnu-licence-gfdl 2719,140755
(defun mon-insert-defclass-template 2759,142840
(defun mon-insert-texi-template 2863,148005
(defun mon-comput-45 2970,151850
(defun mon-comput-33 2999,152870

naf-mode/mon-text-property-utils.el,1950
(defsubst mon-insert-w-text-properties 169,7123
(cl-defun mon-get-text-property-intervals 177,7491
(defun %mon-set-buffer-substring 314,15717
(defun %mon-set-buffer-substring-no-properties 339,16972
(defsetf buffer-substring-no-properties 348,17503
(defun mon-remove-text-property 361,18199
(defun mon-remove-single-text-property 375,19018
(defun mon-nuke-text-properties-region 403,20496
(defun mon-get-face-at-point 430,21831
(defun mon-get-text-properties-region-prop 461,23415
(defun mon-get-text-properties-region-prop-list 480,24346
(defun mon-search-text-properties-prop 506,25826
(defun mon-get-text-properties-region-to-kill-ring 531,26892
(defun mon-get-text-properties-category 558,28192
(defun mon-list-all-properties-in-buffer 576,29029
(defun mon-nuke-text-properties-buffer 607,30640
(defun mon-get-next-face-property-change 634,32318
(defun mon-get-next-face-property-change-if 667,34112
(defun mon-get-text-properties-region 700,35866
(defun mon-get-text-properties-print 733,37710
(defun mon-get-text-properties-read-temp 753,38615
(defun mon-get-text-properties-elisp-string-pp 781,39951
(defun mon-get-text-properties-elisp-string 816,41545
(defun mon-get-text-properties-parse-prop-val-type-chk 850,43301
(defun mon-get-text-properties-parse-buffer 896,45300
(defun mon-get-text-properties-parse-sym 957,48649
(cl-defun mon-get-text-properties-parse-buffer-or-sym 992,50548
(defun mon-get-text-properties-map-ranges 1052,53918
(defun mon-get-text-properties-map-ranges-string 1076,55042
(defun mon-get-text-property-bounds 1107,56670
(defun mon-get-text-property-remove-all 1134,58116
(defun mon-overlay-flash-region 1156,59104
(defun mon-get-overlays-region 1204,61873
(defun mon-get-overlays-region-map-props 1247,63824
(defun mon-get-overlays-map-props 1295,66185
(defun mon-get-overlays-buffer 1330,67923
(defun mon-set-overlay-range 1356,69210
(defun mon-nuke-overlay-buffer 1376,70234

naf-mode/mon-doc-help-proprietary.el,301
(defvar *mon-compromise-my-ms-W32-virginity* 67,1913
(defvar *mon-help-w32-CMD-commands* 76,2472
(defun mon-help-w32-cmd-commands 88,3199
(defun mon-bind-doc-help-proprietery-vars-at-loadtime 113,4537
(defun mon-help-w32-shell-execute 153,6886
(defvar *mon-help-w32-CMD-commands-TEMP* 382,19016

naf-mode/ebay-template-mode/ebay-template-mode.el,613
(defconst *mon-ebay-template-mode-version* 154,5072
(defgroup ebay-template-mode 160,5338
(defgroup ebay-template-mode-faces 168,5610
(defcustom *mon-ebay-account-ids* 177,5931
(defcustom *mon-ebay-comment-prefix* 193,6616
(defvar *mon-ebay-field-entry* 202,6949
(defvar *mon-ebay-field-delims* 247,9035
(defvar *mon-ebay-line-delims* 264,9871
(defvar *mon-ebay-template-font-lock-keywords* 313,12066
(defvar *mon-ebay-template-mode-map*341,13504
(defvar *mon-ebay-template-mode-hook* 384,15845
(defvar *mon-ebay-template-mode-syntax-table*395,16177
(define-derived-mode ebay-template-mode 413,16921

naf-mode/ebay-template-mode/ebay-template-html-utils.el,735
(defvar xmlgen-escape-attribute-vals 165,4942
(defvar xmlgen-escape-elm-vals 169,5067
(defvar xmlgen-escapees173,5187
(defun xmlgen 182,5434
(defun xmlgen-string-escape 235,7300
(defun xmlgen-attr-to-string 247,7708
(defun xmlgen-extract-plist 268,8509
(defgroup html-lite 390,13097
(defcustom html-lite-doctype 396,13262
(defconst html-lite-version 408,13832
(defconst html-lite-doctype-alist411,13903
(defmacro html-lite-define-elements 436,15000
(defun html-lite-make-element 456,15707
(defmacro with-html-lite-header 489,16601
(defun html-lite-escape-string 501,16942
(defun html-doctype 508,17242
(defun html-lite-make-name 517,17591
(defun html-lite-write-tree 522,17736
(defun html-lite-browse-tree 536,18118

naf-mode/ebay-template-mode/ebay-template-tools-ewiki.el,1360
(defun mon-insert-ebay-template 86,2600
(defvar *mon-ebay-template* 107,3613
(defun mon-choose-ebay-delims 181,6239
(defun mon-choose-ebay-account 199,7360
(defun mon-make-html-tree 211,7890
(defun mon-insert-ebay-html-tree 225,8317
(defun mon-make-ebay-dir-list 234,8756
(defun mon-make-ebay-dir-list-2 253,9555
(defun mon-insert-ebay-dirs 307,11936
(defun mon-insert-ebay-dbc-file 357,14621
(defun mon-check-ebay-template-path 375,15541
(defun mon-insert-ebay-dbc-template 462,21635
(defun mon-get-ebay-bmps-in-dir 508,24112
(defalias 'get-bmps-in-dir get-bmps-in-dir525,24945
(defalias 'mon-get-ebay-bmps-list mon-get-ebay-bmps-list526,24999
(defun mon-get-nefs-in-dir 534,25338
(defalias 'get-nefs-in-dir get-nefs-in-dir550,26168
(defun mon-insert-ebay-bmps-in-file 554,26331
(defun mon-get-ebay-jpgs-list 573,27068
(defun mon-insert-ebay-jpgs-in-file 600,28205
(defun mon-get-ebay-jpgs-count 619,28960
(defun mon-get-ebay-bmps-count 631,29397
(defun mon-get-ebay-img-count-verify 643,29832
(defun mon-ebay-field-trigger 680,31408
(defun mon-insert-ebay-field-trigger-r 718,33329
(defun mon-insert-ebay-field-trigger-l 731,33754
(defun mon-insert-ebay-field-trigger-l-and-r 744,34182
(defun mon-insert-ebay-photo-per-scan-descr 764,34869
(defun mon-ebay-image-linkify 790,36162
(defun mon-ebay-image-linkify-lite 841,38415

naf-mode/ebay-template-mode/ebay-template-tools.el,991
(defvar *mon-html-ebay-template* 150,5509
(defvar *mon-html-domain-for-ebay-template*160,5843
(defvar *mon-ebay-image-linkify-templates*173,6455
(defun mon-insert-ebay-template 187,7077
(defvar *mon-ebay-template* 223,9060
(defun mon-choose-ebay-delims 304,12055
(defun mon-choose-ebay-account 324,13353
(defun mon-make-html-tree 341,14154
(defun mon-insert-ebay-html-tree 360,14926
(defun mon-make-ebay-dir-list 372,15522
(defun mon-make-ebay-dir-list-2 396,16573
(defun mon-insert-ebay-dirs 447,19017
(defun mon-insert-ebay-dbc-file 493,21501
(defun mon-check-ebay-template-path 513,22568
(defun mon-insert-ebay-dbc-template 603,28869
(defun mon-ebay-field-trigger 657,31714
(defun mon-insert-ebay-field-trigger-r 699,33791
(defun mon-insert-ebay-field-trigger-l 715,34415
(defun mon-insert-ebay-field-trigger-l-and-r 731,35039
(defun mon-insert-ebay-photo-per-scan-descr 753,35869
(defun mon-ebay-image-linkify 779,37208
(defun mon-ebay-image-linkify-lite 834,40088

naf-mode/naf-mode-events.el,605
(defvar *naf-mode-events-xrefs* 102,3453
(defvar *naf-art-events-generic*211,7613
(defconst naf-mode-art-events-generic 224,8186
(defvar *naf-art-events-generic-french*236,8752
(defconst naf-mode-art-events-generic-french 254,9283
(defvar *naf-art-events-french*266,9905
(defconst naf-mode-art-events-french 295,11423
(defvar *naf-art-events-generic-english*308,11988
(defconst naf-mode-art-events-generic-english 337,12748
(defvar *naf-art-events-english*350,13381
(defconst naf-mode-art-events-english 380,14928
(defvar *naf-world-events*394,15499
(defconst naf-mode-world-events 416,16050

naf-mode/mon-cl-compat.el,5131
(defun cl::cl-simple-expr-p 259,10427
(defun cl::cl-simple-exprs-p 274,11018
(defun cl::cl-safe-expr-p 282,11239
(defun cl::cl-const-expr-p 295,11812
(defun cl::cl-const-exprs-p 306,12179
(defun cl::cl-const-expr-val 313,12371
(defun cl::cl-expr-access-order 318,12548
(defun cl::cl-expr-contains 329,12906
(defun cl::cl-expr-contains-any 340,13259
(defun cl::cl-expr-depends-p 347,13500
(defun cl::gensym 356,13777
(defun cl::gentemp 368,14220
(defun cl::cl-defun-expander 379,14666
(defun cl::cl-do-proclaim 387,14898
(defun cl::cl-defsubst-expand 424,16478
(defun cl::cl-transform-function-property 464,18588
(defun cl::cl-transform-lambda 480,19308
(defun cl::cl-do-arglist 536,22122
(defun cl::cl-arglist-args 670,27218
(defun cl::cl-compile-time-too 684,27760
(defun cl::cl-byte-compile-block 700,28421
(defun cl::cl-byte-compile-throw 715,29087
(defun cl::compiler-macroexpand 729,29616
(defun cl::cl-byte-compile-compiler-macro 745,30230
(defun cl::cl-make-type-test 752,30488
(defun cl::reduce 790,32193
(defun cl::fill 811,33032
(defun cl::replace 831,33660
(defun cl::remove* 874,35463
(defun cl::remove-if 920,37213
(defun cl::remove-if-not 929,37595
(defun cl::delete* 938,37989
(defun cl::delete-if 982,39622
(defun cl::delete-if-not 990,39974
(defun cl::remove-duplicates 998,40338
(defun cl::delete-duplicates 1005,40611
(defun cl::cl-delete-duplicates 1011,40869
(defun cl::substitute 1052,42567
(defun cl::substitute-if 1074,43449
(defun cl::substitute-if-not 1083,43868
(defun cl::nsubstitute 1092,44299
(defun cl::nsubstitute-if 1126,45700
(defun cl::nsubstitute-if-not 1134,46091
(defun cl::find 1142,46494
(defun cl::find-if 1151,46849
(defun cl::find-if-not 1159,47159
(defun cl::position 1167,47481
(defun cl::cl-position 1176,47897
(defun cl::position-if 1198,48718
(defun cl::position-if-not 1206,49049
(defun cl::count 1214,49392
(defun cl::count-if 1229,50035
(defun cl::count-if-not 1236,50296
(defun cl::mismatch 1243,50569
(defun cl::search 1274,51984
(defun cl::sort* 1301,53155
(defun cl::stable-sort 1316,53740
(defun cl::merge 1324,54054
(defun cl::member* 1342,54860
(defun cl::member-if 1357,55403
(defun cl::member-if-not 1365,55697
(defun cl::cl-adjoin 1374,56065
(defun cl::assoc* 1382,56337
(defun cl::assoc-if 1398,56924
(defun cl::assoc-if-not 1405,57179
(defun cl::rassoc* 1412,57449
(defun cl::rassoc-if 1426,57970
(defun cl::rassoc-if-not 1433,58227
(defun cl::union 1440,58499
(defun cl::nunion 1461,59368
(defun cl::intersection 1472,59854
(defun cl::nintersection 1495,61212
(defun cl::set-difference 1505,61676
(defun cl::nset-difference 1525,62470
(defun cl::set-exclusive-or 1536,62966
(defun cl::nset-exclusive-or 1549,63620
(defun cl::subsetp 1562,64240
(defun cl::subst-if 1577,64778
(defun cl::subst-if-not 1585,65148
(defun cl::nsubst 1593,65530
(defun cl::nsubst-if 1602,65902
(defun cl::nsubst-if-not 1610,66282
(defun cl::sublis 1620,66760
(defun cl::cl-sublis-rec 1629,67140
(defun cl::nsublis 1643,67649
(defun cl::cl-nsublis-rec 1653,68073
(defun cl::tree-equal 1668,68751
(defun cl::cl-tree-equal-rec 1676,69094
(defun cl::cl-set-substring 1689,69496
(defun cl::cl-macroexpand 1704,70060
(defun cl::cl-compiling-file 1723,70935
(defun cl::proclaim 1733,71320
(defun cl::cl-random-time 1740,71565
(defun cl::list* 1747,71801
(defun cl::ldiff 1762,72328
(defun cl::floatp-safe 1773,72691
(defun cl::plusp 1781,72973
(defun cl::minusp 1787,73115
(defun cl::oddp 1794,73297
(defun cl::evenp 1801,73488
(defun cl::subst 1807,73641
(defun cl::cl-do-subst 1818,74171
(defun cl::copy-list 1829,74560
(defun cl::acons 1842,75004
(defun cl::pairlis 1850,75284
(defun cl::mapcar* 1859,75669
(defun cl::subseq 1883,76609
(defun cl::coerce 1911,77593
(defun cl::typep 1929,78315
(defun cl::gcd 1938,78600
(defun cl::lcm 1949,78906
(defun cl::isqrt 1962,79237
(defun cl::floor* 1976,79641
(defun cl::ceiling* 1985,79956
(defun cl::truncate* 1995,80341
(defun cl::round* 2004,80693
(defun cl::mod* 2025,81361
(defun cl::rem* 2032,81555
(defun cl::signum 2039,81754
(defun cl::cl-mapcar-many 2047,82034
(defun cl::map 2082,83089
(defun cl::maplist 2092,83478
(defun cl::cl-mapc 2114,84178
(defun cl::mapl 2125,84521
(defun cl::mapcan 2137,84917
(defun cl::mapcon 2145,85211
(defun cl::some 2153,85502
(defun cl::every 2171,86136
(defun cl::notany 2187,86675
(defun cl::notevery 2195,86949
(defun cl::concatenate 2203,87228
(defun cl::revappend 2214,87644
(defun cl::nreconc 2221,87817
(defun cl::list-length 2228,87993
(defun cl::tailp 2238,88366
(defun cl::get* 2248,88731
(define-compiler-macro cl::get* 2258,89133
(defun cl::cl-set-getf 2268,89385
(defun cl::cl-do-remf 2276,89666
(defun cl::cl-remprop 2284,89946
(defun cl::cl-prettyprint 2298,90447
(defun cl::cl-do-prettyprint 2316,91036
(defvar cl::cl-macroexpand-cmacs 2346,92094
(defvar cl::cl-closure-vars 2347,92132
(defun cl::cl-macroexpand-all 2349,92180
(defun cl::cl-macroexpand-body 2434,96017
(defun cl-prettyexpand 2440,96228
(defun mon-cl-compat-loadtime 2453,96787

naf-mode/naf-mode-nation-french.el,127
(defvar *naf-mode-nation-french-xrefs* 84,2703
(defvar *naf-nation-french*104,3422
(defconst naf-mode-nation-french276,7334

naf-mode/naf-mode-regions.el,95
(defconst naf-mode-region-names-other193,5120
(defconst naf-mode-region-names-french345,8510

naf-mode/naf-mode.el,356
(defgroup naf-mode 206,6301
(defgroup naf-mode-faces 213,6593
(defconst *naf-mode-version* 223,6971
(defcustom *naf-comment-prefix* 229,7256
(defvar naf-font-lock-keywords239,7606
(defvar naf-mode-syntax-table369,15770
(defvar naf-mode-map394,16828
(defun new-naf 875,42600
(defvar naf-mode-hook 896,43553
(define-derived-mode naf-mode 902,43773

naf-mode/mon-lisppaste.el,79
(defcustom *tt--colorize-as* 327,11270
(defun mon-lisppaste-region 336,11564

naf-mode/mon-color-utils.el,1329
(defgroup mon-color-utils 163,5890
(defcustom *mon-color-utils-xrefs* 177,6674
(defun mon-color-list-display 224,8294
(defun mon-color-random-rgb 235,8821
(defun mon-color-random-html 244,9242
(defun mon-color-mix 255,9674
(defun mon-color-mix-display 283,11222
(defun mon-defined-colors-without-duplicates 320,13278
(defun mon-rgb-to-hsv 348,14639
(defvar *mon-colorcomp-ewoc* 407,17408
(defvar *mon-colorcomp-data* 416,17848
(defvar *mon-colorcomp-mode-map* 425,18284
(defvar *mon-colorcomp-labels* 431,18520
(defvar *mon-colorcomp-buffer-name* 437,18823
(defvar *mon-colorcomp-adjust-alist* 446,19210
(defun mon-colorcomp-pp 463,20105
(defun mon-color-read 502,21844
(defun mon-colorcomp-read-percentage 512,22354
(defun mon-colorcomp-get-buffer 526,22914
(defun mon-colorcomp-get-data 534,23267
(defun mon-colorcomp-get-data-rgb-hex 546,23886
(defun mon-colorcomp-get-color-adjust-rgb 563,24732
(defun mon-colorcomp 624,27605
(defun mon-colorcomp-mod 680,30264
(defun mon-colorcomp-get-color-adjust-if 698,31036
(defun mon-colorcomp-R-more 735,32621
(defun mon-colorcomp-G-more 745,33066
(defun mon-colorcomp-B-more 755,33512
(defun mon-colorcomp-R-less 765,33957
(defun mon-colorcomp-G-less 775,34400
(defun mon-colorcomp-B-less 785,34847
(defun mon-colorcomp-copy-as-kill-and-exit 797,35370

naf-mode/naf-mode-benezit-flags.el,151
(defconst naf-mode-benezit-section-flag92,3119
(defconst naf-mode-benezit-currency-acronym99,3522
(defvar *naf-mode-benezit-currency-alist*171,6383

naf-mode/mon-mysql-utils.el,1004
(defun mon-cln-pipes-get-field-col 132,4504
(defalias 'mon-mysql-get-field-col mon-mysql-get-field-col201,8118
(defun %subst% 211,8622
(defun mon-cln-pipes 250,10176
(defalias 'mon-mysql-cln-pipes mon-mysql-cln-pipes439,20545
(defun mon-cln-pipes-map-field-pairs 467,21673
(defalias 'mon-mysql-cln-pipes-map-col-field mon-mysql-cln-pipes-map-col-field519,23939
(defun mon-csv-string-to-list 546,25095
(defalias 'mon-mysql-csv-to-list mon-mysql-csv-to-list581,26920
(defun mon-csv-string-map-list 589,27219
(defalias 'mon-mysql-csv-map-list mon-mysql-csv-map-list604,28049
(defun mon-csv-map-col-field-pairs 614,28523
(defalias 'mon-mysql-csv-map-col-field mon-mysql-csv-map-col-field639,29737
(defun mon-csv-split-string 659,30501
(defalias 'mon-mysql-csv-split-string mon-mysql-csv-split-string693,32108
(defvar *regexp-clean-mysql* 698,32311
(defun mon-bind-mysql-help-table-loadtime 730,34041
(defun mon-help-mysql-complete 906,46641
(defun mon-help-mysql-commands 933,47921

naf-mode/google-define-redux.el,2416
(defgroup google-define-redux 209,7933
(defgroup google-define-redux-faces 234,9053
(defcustom *google-define-redux-xrefs* 251,9748
(defcustom *google-define-get-buffer* 299,12292
(defcustom *google-define-buffer-suffix* 317,13125
(defvar *get-google-defined* 336,14051
(defvar *regexp-google-define-headings* 361,15045
(defvar *regexp-google-define-itemized*385,15955
(defvar *regexp-google-define-dictionary-heading-tag*415,17557
(defvar *regexp-google-define-next-url-in-heading*449,18663
(defvar *regexp-google-define-source-ref*495,20298
(defface gg-def-base544,21991
(defface gg-def-delim 560,22681
(defface gg-def-heading578,23423
(defface gg-def-num 591,23983
(defface gg-def-inition604,24569
(defface gg-def-defined620,25362
(defcustom *regexp-google-defined-fontlock*632,25880
(defun google-define-get-command 676,28608
(defun %google-define-verify-query-url-lang-params 735,31550
(defun %google-define-verify-query-url-xref-type-params 755,32435
(defun google-define-clean-string 774,33210
(defun %google-define-clean-term-for-split 818,35691
(defun %google-define-clean-heading-for-replace 838,36720
(defun* google-define-make-query-url 851,37466
(defun google-define-parse-buffer 905,40304
(defun google-define-font-lock 1046,48040
(defun %google-define-set-url-current-object 1078,49831
(defun google-define 1111,51492
(defun google-define-kill-def-buffers 1166,54344
(defun google-define-find-next-heading 1211,56290
(defun google-define-make-heading-replacement 1241,57803
(defun google-define-find-next-url-in-heading 1266,58944
(defun google-define-find-headings 1312,60733
(defun %google-define-find-itemized-regexp-for-search-term 1350,62416
(defun google-define-find-itemized 1373,63234
(defun google-define-parse-related-languages 1402,64177
(defun %google-define-find-next-related-lang-regexp-for-search-term 1425,65107
(defun google-define-find-next-related-language-xref 1473,66425
(defun google-define-related-language-url 1485,67016
(defun google-define-related-language-xref 1514,68635
(defun google-define-button-action 1582,71242
(defun google-define-button-do-xref 1595,71779
(defun google-define-insert-xref-button 1606,72195
(define-button-type 'google-define-buttongoogle-define-button1624,72956
(define-button-type 'google-related-lang-buttongoogle-related-lang-button1632,73190
(defconst *google-define-html-entry-table*1759,79291

naf-mode/mon-line-utils.el,2062
(defgroup mon-line-utils 225,8562
(defcustom *mon-line-utils-xrefs*240,9362
(defun mon-line-get-next 276,11396
(defun mon-line-find-duplicates 297,12313
(defun mon-line-find-duplicates-cln 326,13774
(defun mon-line-previous-duplicate 372,15968
(defun mon-line-count-region 409,17835
(defun mon-line-count-buffer 419,18276
(defun mon-line-count-matchp 459,20199
(defun mon-line-length-max 487,21374
(defun mon-line-strings 512,22331
(defun mon-line-strings-region 567,24248
(defun mon-line-strings-qt-region 618,26259
(defun mon-line-strings-bq-qt-sym-bol 679,29372
(defun mon-line-strings-pipe-bol 741,32907
(defun mon-line-strings-indent-to-col 792,34996
(defun mon-line-indent-from-to-col 873,38625
(defun mon-line-strings-pipe-to-col 948,42175
(defun mon-line-pipe-lines 999,44677
(defun mon-line-strings-to-conses 1055,46755
(defun mon-line-strings-to-list 1089,48176
(defun mon-line-strings-one-list 1170,52574
(defun mon-line-string-rotate-name 1195,53777
(defun mon-line-string-rotate-namestrings 1238,56164
(defun mon-line-string-unrotate-namestrings 1295,58363
(defun mon-line-string-rotate-namestrings-combine 1371,61657
(defun mon-line-string-insert-chars-under 1426,63813
(defun mon-line-drop-in-words 1472,66034
(defun mon-line-string-incr-padded 1536,70028
(defun mon-line-number-region-incr 1575,72125
(defun mon-line-string-get 1621,74298
(defun mon-line-string-split 1647,75562
(defun mon-spacep 1700,78186
(defun mon-spacep-not-bol 1729,79650
(defun mon-spacep-is-bol 1750,80672
(defun mon-spacep-is-after-eol 1772,81746
(defun mon-spacep-is-after-eol-then-graphic 1790,82685
(defun mon-spacep-at-eol 1819,84234
(defun mon-spacep-first 1840,85332
(defun mon-line-bol-is-eol 1858,86065
(defun mon-line-previous-bol-is-eol 1879,87158
(defun mon-line-next-bol-is-eol 1907,88573
(defun mon-line-eol-is-eob 1931,89687
(defun mon-line-end-or-code-end 1960,91134
(defun mon-backspace 1987,92300
(defun mon-goto-line-25% 1999,92667
(defun mon-goto-line-50% 2012,93278
(defun mon-goto-line-75% 2025,93868

naf-mode/mon-url-utils.el,1851
(defgroup mon-url-utils 203,7962
(defcustom *mon-url-utils-xrefs* 217,8767
(defcustom *mon-url-search-paths* 255,10939
(defcustom *mon-purge-on-its-all-text-on-quit* 298,13128
(defcustom *mon-purge-htmlfontify-dir-on-quit* 317,13981
(defcustom *regexp-hexcolor-keywords* 334,14714
(defun mon-its-all-text-purge-on-quit 364,16104
(defun mon-html-fontify-generate-file-name 415,19002
(defun mon-htmlfontify-dir-purge-on-quit 445,20641
(defun mon-htmlfontify-buffer-to-firefox 492,23549
(defun mon-htmlfontify-region-to-firefox 525,25111
(defun mon-hexcolor-add-to-font-lock 560,26785
(defun mon-url-encode 573,27573
(defun mon-url-decode 595,28635
(defun mon-search-ulan 622,29999
(defun mon-search-ulan-for-name 697,34182
(defun mon-search-wikipedia 706,34533
(defun mon-search-loc 731,35713
(defun mon-search-bnf 748,36573
(defun mon-insert-dbc-link 763,37328
(defun mon-insert-dbc-doc-link 776,37864
(defun mon-get-chrome-url 813,39236
(defun mon-get-chrome-url-insert 851,41209
(defun mon-get-chrome-url-insert-org-link 870,41929
(defun mon-wrap-one-url 891,42845
(defun mon-wrap-all-urls 943,45528
(defun mon-wrap-url 989,47979
(defun mon-wrap-span 1013,48917
(defun mon-make-html-table-string 1039,49660
(defun mon-make-html-table 1068,50897
(defun mon-url-retrieve-to-new-buffer 1093,52051
(defun mon-get-host-address 1113,53184
(defun mon-w3m-dired-file 1146,54596
(defun mon-w3m-kill-url-at-point 1159,55199
(defun mon-get-w3m-url-at-point-maybe 1175,55971
(defun mon-get-w3m-url-at-point 1196,57083
(defun mon-w3m-goto-url-at-point 1219,58217
(defun mon-w3m-read-gnu-lists-nxt-prv 1243,59496
(defcustom *mon-tld-hash-table* 1355,64790
(defsubst mon-tld-tld 1654,77250
(defsubst mon-tld-name 1661,77543
(defun mon-tld-find-tld 1670,77867
(defun mon-tld-find-name 1688,78617
(defun mon-tld 1703,79163

naf-mode/naf-mode-french-roles.el,100
(defconst naf-mode-french-roles-primary182,5656
(defconst naf-mode-french-roles-secondary296,8992

naf-mode/mon-doc-help-css.el,274
(defgroup mon-doc-help-css 140,4627
(defcustom *mon-doc-help-css-xrefs* 155,5303
(defun mon-help-css-check 182,6514
(defun mon-help-css-complete 322,11743
(defun mon-help-css-mode 431,15128
(defun mon-help-css-color 485,16989
(defun mon-help-css-properties 585,20217

naf-mode/mon-button-utils.el,830
(defgroup mon-button-utils 120,3475
(defcustom *mon-button-utils-xrefs* 139,4531
(defvar *mon-default-button-map*159,5373
(define-button-type 'mon-default-button mon-default-button170,5753
(defun mon-button-at-point-p 183,6246
(defun mon-button-at-point-describe-button-plist 223,8494
(defun mon-button-get-plist 242,9477
(defun mon-button-get-plist-props 281,11655
(defalias 'mon-get-button-plist-props mon-get-button-plist-props303,12688
(defun mon-follow-button 310,12926
(defun tt--make-test-button 374,15188
(defvar *naf-button-map* 399,16115
(defface naf-mode-artist-face-inverted411,16553
(define-button-type 'naf-dirnaf-dir425,16990
(define-button-type 'naf-artist naf-artist440,17562
(defun insert-naf-artist-button 464,18528
(defun naf-btn-activate 482,19256
(defun naf-next-label-button 495,19715

naf-mode/naf-mode-intnl-city-names.el,99
(defconst naf-mode-intnl-auction-city-names110,3131
(defconst naf-mode-intnl-city-names390,10691

naf-mode/mon-replacement-utils.el,3554
(defgroup mon-replacement-utils 189,7782
(defcustom *mon-replacement-utils-xrefs* 203,8623
(defun mon-is-naf-mode-p 255,11843
(defvar *naf-mode-buffer-local-llm* 302,14114
(defun mon-is-naf-mode-and-llm-p 310,14491
(defvar *iso-latin-1-approximation* 366,17022
(defun mon-make-iso-latin-1-approximation 373,17417
(defun mon-make-iso-latin-1-approximation-loadtime 395,18331
(defun mon-cln-iso-latin-1 407,18986
(defmacro deftransmogrify 426,19972
(defun mon-transmogrify 442,20644
(defun mon-walk-regexps-in-file 479,22593
(defun %mon-filter-regexp-file-if 505,23840
(defun %mon-filtering-regexp-file-list 521,24387
(defun mon-replace-regexps-in-file-list 530,24795
(defun mon-replace-strings 589,27812
(defun mon-replace-regexp-while 622,29620
(defun mon-replace-string-while 631,30037
(defun mon-regexp-filter 639,30342
(defun mon-string-canonical 659,31232
(defun replace-string-pairs-region3 728,35386
(defun replace-string-pairs-region-no-props 759,36865
(defun mon-replace-string-pairs-region-no-insert 790,38373
(defun mon-get-list-yorp 835,40222
(defun mon-get-list-norp 853,41110
(defun mon-replace-region-regexp-lists-nonint 869,41827
(defun mon-replace-region-regexp-lists 906,43644
(defun mon-regexp-map-match 961,46524
(defun mon-regexp-map-match-in-region 1003,48584
(defvar *mon-regexp-unintern* 1094,53302
(defun mon-replace-unintern-w-query 1163,56511
(defun mon-cln-mail-headers 1259,61064
(defun mon-cln-csv-fields 1405,68277
(defun mon-cln-irc-log-buffer 1575,76936
(defun mon-cln-freenode-log 1606,78253
(defun mon-cln-file-name-string 1631,79213
(defun mon-cln-html-chars 1658,80423
(defun mon-cln-html-tags 1675,81208
(defun mon-cln-xml-escapes 1714,83328
(defun mon-cln-xml<-parsed 1752,85302
(defun mon-cln-tgm-xml-LF 1782,86689
(defun mon-cln-xml<-parsed-strip-nil 1801,87347
(defun mon-cln-up-colon 1830,88635
(defun mon-downcase-hex-values 1901,92169
(defun mon-upcase-commented-lines 1917,92959
(defun mon-zippify-region 1934,93846
(defun mon-toggle-case-query-user 1952,94499
(defun mon-toggle-case-regexp-region 1998,96921
(defun mon-toggle-case-regexp 2040,99152
(defun mon-downcase-regexp-region 2097,102054
(defun mon-upcase-regexp-region 2116,103195
(defun mon-downcase-regexp 2136,104349
(defun mon-upcase-regexp 2158,105459
(defun mon-cln-BIG-whitespace 2183,106681
(defun mon-cln-whitespace 2232,109106
(defun mon-cln-trail-whitespace 2253,110065
(defun mon-kill-whitespace 2273,110893
(defun mon-cln-blank-lines 2288,111562
(defun mon-cln-spc-tab-eol 2309,112505
(defun mon-cln-spc-tab-at-eol-in-region 2331,113528
(defun mon-cln-uniq-lines 2358,114592
(defun mon-exchange-slash-and-backslash 2391,116070
(defun mon-cln-control-M 2412,117134
(defun mon-cln-piped-list 2432,117935
(defun mon-delete-back-up-list 2481,120081
(defun naf-backup-the-list 2523,122095
(defun mon-cln-philsp 2533,122454
(defun mon-cln-ulan 2569,124412
(defun mon-cln-imdb 2649,128742
(defun mon-cln-loc 2671,129719
(defun mon-cln-wiki 2693,130899
(defun mon-cln-bib 2710,131705
(defun mon-num-to-month 2725,132321
(defun mon-num-to-month-whitespace 2744,133126
(defun mon-month-to-num 2763,134054
(defun mon-abr-to-month 2781,134806
(defun mon-trans-cp1252-to-latin1 2800,135625
(defun mon-ital-date-to-eng 2819,136421
(defun mon-defranc-dates 2835,137128
(defun mon-defranc-places 2852,137916
(defun mon-cln-benezit 2871,138771
(defun mon-cln-benezit-fields 2889,139628
(defun mon-replace-common-abbrevs 2905,140329
(defun bug-cln-gilt-group 2928,141487

naf-mode/naf-mode-sql-skeletons.el,309
(define-skeleton mon-insert-sql-item-select89,2998
(define-skeleton mon-insert-sql-item-range-select98,3363
(define-skeleton mon-insert-sql-multiple-items-select108,3764
(defun mon-insert-sql-update 118,4280
(define-skeleton mon-insert-sql-item-update-skeleton158,6150
(define-skeleton item-naf167,7459

naf-mode/mon-name-utils.el,633
(defmacro mon-intern-artist 143,5106
(defun mon-string-rotate-name 163,5954
(defun mon-make-lastname-firstname 210,7924
(defun mon-make-names-list 246,9564
(defun mon-string-csv-rotate 277,10893
(defun mon-string-csv-regexp 292,11544
(defun mon-csv-to-perms 313,12541
(defvar *rotate-text-rotations* 369,15655
(defun mon-rotate-region 394,16733
(defun mon-rotate-string 428,18745
(defun mon-rotate-next 462,20795
(defun mon-rotate-get-rotations-for 498,22888
(defun mon-string-rotate-to-regexp 520,24240
(defun mon-indent-or-rotate 547,25553
(defun mon-make-name-return 568,26488
(defun mon-make-name-lispy 577,26870

naf-mode/naf-mode-nationality-english.el,144
(defvar *naf-mode-nationality-english-xrefs*81,2651
(defvar *naf-nationality-english*100,3391
(defconst naf-mode-nationality-english199,5076

naf-mode/naf-mode-wordfreq.el,43
(defconst *naf-mode-wordfreq-words*33,863

naf-mode/mon-doc-help-mail.el,81
(defun mon-help-mail-functons 142,4949
(defun mon-help-bbdb-functons 391,11067

naf-mode/mon-rectangle-utils.el,347
(defun mon-rectangle-columns 131,4034
(defun mon-rectangle-sum-column 156,5021
(defun mon-rectangle-operate-on 187,6488
(defun mon-rectangle-apply-on-region-points 221,7959
(defun mon-rectangle-downcase 243,8938
(defun mon-rectangle-upcase 252,9361
(defun mon-rectangle-capitalize 260,9683
(defun mon-kill-rectangle-w-beer-belly 273,10401

naf-mode/mon-syntax-utils.el,533
(defun mon-read-unreadable-object 62,2100
(defun mon-get-text-properties-elisp-string2 343,15515
(defun mon-get-text-properties-map-ranges-string-chk-type 415,18666
(defun mon-get-text-properties-map-ranges-compensate 613,29622
(cl-defun mon-get-text-properties-map-ranges-string 635,30436
(defun mon-syn-rng-scn-psn-at 752,34431
(defun mon-syn-parse-args 757,34580
(defun mon-syn-skp-to6 804,36101
(defun mon-syn-rng-scn6 829,37187
(defun rng-scn-2-3 837,37326
(defun mon-lisp-font-lock-syntactic-face-function 917,40084

naf-mode/mon-hash-utils.el,835
(defun mon-hash-get-symbol-name-if 169,6014
(defun mon-hash<-vector 311,12617
(defun mon-hash-make-size 326,13452
(defun mon-hash-from-alist 354,14872
(defun mon-hash-to-alist 374,15803
(defun mon-hash-add-uniquify 393,16699
(defun mon-hash-readlines-file 421,18016
(defun mon-hash-readlines-buffer 441,18970
(defun mon-hash-all-values 474,20527
(defun mon-hash-all-keys 489,21201
(defun mon-hash-to-list 504,21875
(defmacro mon-hash-get-keys 526,22842
(defmacro mon-hash-get-items 568,24998
(defmacro mon-hash-get-values 588,26005
(defmacro mon-hash-get-symbol-keys 608,27021
(defmacro mon-hash-get-string-keys 651,29377
(defmacro mon-hash-has-key 683,30806
(defmacro mon-hash-put-CL 703,31743
(defun mon-hash-describe 742,33558
(defun mon-hash-describe-descend 783,35287
(defun mon-hash-table-complete 807,36210

naf-mode/mon-dir-locals-alist.el,1107
(defgroup mon-dir-locals 143,4841
(defcustom *mon-bind-dir-locals-alist* 159,5758
(defcustom *mon-dir-locals-alist-xrefs*169,6155
(defcustom *mon-HG-root-path* 197,7609
(defcustom *mon-smith-poster-HG-path* 210,8132
(defcustom *mon-CL-scratch-path* 231,9019
(defcustom *bug-HG-path* 247,9656
(defcustom *mon-record-current-directory* 264,10321
(defcustom *emacs2html-temp* 282,11028
(defcustom *mon-html-fontify-file-name-template* 299,11820
(defcustom *mon-artist-naf-path* 314,12583
(defcustom *mon-brand-naf-path* 339,13586
(defcustom *mon-nef-scan-drive* 358,14333
(defcustom *mon-nef-scan-base-path* 370,14921
(defcustom *mon-nef-scan-path* 389,15789
(defcustom *mon-nef-scan-nefs-path* 405,16442
(defvar *mon-nefs_photos_nefs-alist* 426,17478
(defcustom *mon-nef-scan-nef2-path* 437,18105
(defcustom *mon-ebay-images-path* 454,18859
(defcustom *mon-ebay-images-bmp-path* 472,19656
(defcustom *mon-ebay-images-jpg-path* 491,20527
(defcustom *mon-ebay-images-temp-path* 510,21414
(defcustom *mon-ebay-images-lookup-path* 531,22432
(defcustom *mon-buffer-mode-defaults* 562,24092

naf-mode/mon-type-utils.el,1391
(defgroup mon-type-utils 189,7781
(defcustom *mon-type-utils-xrefs*205,8613
(defun mon-function-object-p 261,11348
(defun mon-symbol-cells-bound-p 435,21441
(defun mon-equality-or-predicate 528,26880
(defun mon-booleanp 574,29379
(defun mon-xor 622,31792
(defun mon-bitset-ternary 632,32176
(defun mon-string-or-null-and-zerop 666,33457
(defun mon-string-not-null-nor-zerop 692,34749
(defun mon-zero-or-onep 715,36067
(defun mon-booleanp-to-binary 761,38179
(defun mon-sequence-all-booleanp 812,40513
(defun mon-list-proper-p 948,48822
(defun mon-list-dotted-p 982,50437
(defun mon-list-proper-and-dotted-p 1006,51579
(defun mon-sequence-mappable-p 1032,53067
(defun mon-hash-or-mappable-p 1179,61348
(defvar *mon-bit-table* 1189,61826
(defun mon-get-bit-table 1200,62306
(defun mon-fractionp 1283,66447
(defun mon-integer-and-chacterp 1307,67487
(defun mon-char-code 1316,67879
(defun mon-alpha-char-p 1342,68977
(defun mon-digit-char-p 1356,69632
(defun mon-is-digit 1377,70518
(defun mon-is-letter 1419,72282
(defun mon-is-alphanum 1449,73653
(defun mon-is-digit-simp 1477,75065
(defun mon-is-letter-simp 1495,76001
(defun mon-is-alphanum-simp 1514,76865
(defun mon-coerce->char 1540,78085
(defun mon-string-to-symbol 1641,83612
(defun mon-symbol-to-string 1729,88162
(defun mon-string-to-sequence 1763,89788
(defun mon-string-from-sequence 1806,92112

naf-mode/mon-aliases.el,24615
(defalias 'atomp atomp274,11011
(defalias 'line-join-previous line-join-previous278,11139
(defalias 'stringp-or-null stringp-or-null282,11290
(defalias 'char-or-stringp char-or-stringp286,11435
(defalias 'string-or-characterp string-or-characterp290,11590
(defalias 'character-or-strinp character-or-strinp294,11748
(defalias 'shell-command-async shell-command-async298,11905
(defalias 'asynchronous-shell-command asynchronous-shell-command302,12079
(defalias 'menubar-mode menubar-mode306,12232
(defalias 'mon-register-query-replace-register1<-reg2mon-register-query-replace-register1<-reg2396,15644
(defalias 'mon-register-reset mon-register-reset401,15840
(defalias 'mon-clear-registers mon-clear-registers405,15998
(defalias 'make-array make-array418,16641
(defalias 'macrop macrop425,16893
(defalias 'mon-string-combine-and-quote mon-string-combine-and-quote443,17416
(defalias 'mon-string-split-and-unquote mon-string-split-and-unquote447,17608
(defalias 'mon-replace-char-in-region mon-replace-char-in-region451,17795
(defalias 'mon-delq-alist mon-delq-alist457,18064
(defalias 'mon-string-set-char-at-idx mon-string-set-char-at-idx464,18379
(defalias 'mon-string-insert-string-at-idx mon-string-insert-string-at-idx475,18983
(defalias 'mon-skip-whitespace mon-skip-whitespace495,19911
(defun mon-show-trailing-whitespace 514,20736
(defalias 'mon-save-restricton mon-save-restricton537,21990
(defalias 'mon-sort-alist mon-sort-alist541,22143
(defalias 'mon-macrop mon-macrop549,22467
(defalias 'mon-string-prefix-p mon-string-prefix-p553,22612
(defalias 'mon-list-chop mon-list-chop564,23140
(defalias 'mon-buffer-do-with-undo-disabled mon-buffer-do-with-undo-disabled576,23718
(defalias 'mon-window-get-if-buffer mon-window-get-if-buffer580,23933
(defalias 'mon-buffer-name-print-readably mon-buffer-name-print-readably584,24147
(defalias 'mon-buffer-get-w-mode mon-buffer-get-w-mode588,24357
(defalias 'mon-functionp mon-functionp592,24508
(defalias 'mon-one-or-zerop mon-one-or-zerop596,24658
(defalias 'mon-1-or-0-p mon-1-or-0-p600,24797
(defalias 'mon-1-or-0-p mon-1-or-0-p604,24932
(defalias 'mon-zerop-or-one mon-zerop-or-one608,25075
(defalias 'mon-boolean-to-binary mon-boolean-to-binary612,25232
(defalias 'mon-t-to-1 mon-t-to-1616,25378
(defalias 'mon-true-to-one mon-true-to-one620,25523
(defalias 'mon-nil-to-0 mon-nil-to-0624,25667
(defalias 'mon-false-to-zero mon-false-to-zero628,25818
(defalias 'mon-split-string mon-split-string632,25972
(defalias 'mon-string->symbol mon-string->symbol636,26124
(defalias 'mon-symbol->string mon-symbol->string640,26282
(defalias 'mon-string-from-symbol mon-string-from-symbol644,26451
(defalias 'mon-string<-symbol mon-string<-symbol648,26612
(defalias 'mon-sequence-to-string mon-sequence-to-string652,26780
(defalias 'mon-seq->string mon-seq->string656,26939
(defalias 'mon-string-suffix-p mon-string-suffix-p660,27100
(defalias 'mon-replace-char-in-string mon-replace-char-in-string664,27276
(defalias 'mon-remove-char-in-string mon-remove-char-in-string668,27459
(defalias 'mon-indent-lines-from-to-col mon-indent-lines-from-to-col672,27646
(defalias 'mon-generate-wonky mon-generate-wonky676,27823
(defalias 'mon-hex-list-as-string mon-hex-list-as-string680,27987
(defalias 'mon-string-escape-lisp-region mon-string-escape-lisp-region684,28174
(defalias 'mon-lisp-escape-region mon-lisp-escape-region688,28359
(defalias 'mon-string-unescape-lisp-region mon-string-unescape-lisp-region692,28555
(defalias 'mon-lisp-unescape-region mon-lisp-unescape-region696,28748
(defalias 'mon-string-ify-current-line mon-string-ify-current-line700,28941
(defalias 'with-print-gensyms with-print-gensyms715,29360
(defalias 'nshuffle-vector nshuffle-vector719,29536
(defalias 'with-gensyms with-gensyms724,29791
(defalias 'buffer-exists-p buffer-exists-p731,30098
(defalias 'mon-buffer-print-in-if mon-buffer-print-in-if737,30315
(defalias 'mon-get-text-properties-region->kill-ring mon-get-text-properties-region->kill-ring752,30791
(defalias 'mon-kill-ring-save-w-props mon-kill-ring-save-w-props756,31009
(defalias 'mon-help-face-next-property-change mon-help-face-next-property-change760,31228
(defalias 'mon-remove-text-with-property mon-remove-text-with-property764,31436
(defalias 'mon-remove-text-properties-region-all mon-remove-text-properties-region-all768,31655
(defalias 'mon-remove-all-text-properties-region mon-remove-all-text-properties-region772,31881
(defalias 'write-string write-string787,32327
(defalias 'mon-prin1-char->?char mon-prin1-char->?char792,32495
(defalias 'buffer-narrowed-p buffer-narrowed-p814,33347
(defalias 'get-buffer-window-if get-buffer-window-if818,33532
(defalias 'goto-line-25% goto-line-25%822,33708
(defalias 'goto-line-50% goto-line-50%826,33870
(defalias 'goto-line-75% goto-line-75%830,34032
(defalias 'mon-buffer-end mon-buffer-end836,34230
(defalias 'mon-get-hidden-buffers mon-get-hidden-buffers840,34379
(defalias 'mon-help-hidden-buffers mon-help-hidden-buffers844,34551
(defalias 'mon-buffer-get-hidden mon-buffer-get-hidden848,34720
(defalias 'mon-longlines-mode-p mon-longlines-mode-p852,34888
(defalias 'mon-buffer-append-to mon-buffer-append-to856,35058
(defalias 'mon-buffer-make-shell mon-buffer-make-shell860,35223
(defalias 'mon-buffer-get-shell mon-buffer-get-shell864,35388
(defalias 'mon-kill-hidden-buffer-if mon-kill-hidden-buffer-if868,35550
(defalias 'mon-buffer-get-hidden-if mon-buffer-get-hidden-if872,35731
(defvaralias '*mon-help-hidden-buffers-known* *mon-help-hidden-buffers-known*877,35946
(defalias 'next-almost-prime next-almost-prime892,36396
(defalias 'mon-get-next-almost-prime mon-get-next-almost-prime898,36624
(defalias 'mon-rectangle-kill-w-longest-line mon-rectangle-kill-w-longest-line913,37090
(defalias 'mon-line-keep-match mon-line-keep-match928,37529
(defalias 'mon-line-delete-match mon-line-delete-match932,37685
(defalias 'mon-line-count-match mon-line-count-match936,37841
(defalias 'mon-line-join-previous mon-line-join-previous940,37998
(defalias 'mon-line-same-p mon-line-same-p945,38182
(defalias 'mon-get-window-plist mon-get-window-plist960,38600
(defalias 'mon-window-map-active-to-plist mon-window-map-active-to-plist964,38785
(defalias 'mon-buffer-get-scratch mon-buffer-get-scratch968,38964
(defalias 'mon-buffer-get-messages mon-buffer-get-messages972,39126
(defalias 'mon-buffer-kill-completions mon-buffer-kill-completions976,39308
(defalias 'mon-window-flip mon-window-flip980,39468
(defalias 'mon-window-split-horiz mon-window-split-horiz984,39626
(defalias 'mon-window-split-vert mon-window-split-vert988,39792
(defalias 'delq-dups delq-dups1003,40194
(defalias 'mon-string-longest-in-list mon-string-longest-in-list1009,40407
(defalias 'mon-reorder-vector mon-reorder-vector1013,40577
(defalias 'mon-sequence-reorder mon-sequence-reorder1017,40735
(defalias 'mon-list-union mon-list-union1021,40882
(defalias 'mon-list-member-if mon-list-member-if1025,41025
(defalias 'mon-list-delete-if mon-list-delete-if1029,41177
(defalias 'mon-list-remove-if-not mon-list-remove-if-not1033,41335
(defalias 'mon-list-remove-if mon-list-remove-if1037,41493
(defalias 'mon-list-intersect mon-list-intersect1041,41644
(defalias 'mon-list-set-diff mon-list-set-diff1045,41797
(defalias 'mon-list-nqueue mon-list-nqueue1049,41946
(defalias 'mon-list-flatten mon-list-flatten1053,42108
(defalias 'mon-rotate-flatten-list mon-rotate-flatten-list1057,42264
(defalias 'mon-list-mismatch mon-list-mismatch1061,42430
(defalias 'mon-list-combine mon-list-combine1065,42574
(defalias 'mon-map-combine mon-map-combine1069,42714
(defalias 'mon-list-permute-combine mon-list-permute-combine1073,42871
(defalias 'mon-list-permute-combine-1 mon-list-permute-combine-11077,43049
(defalias 'mon-list-recurse-apply mon-list-recurse-apply1081,43225
(defalias 'mon-merge-list mon-merge-list1085,43377
(defalias 'mon-list-delq-dups mon-list-delq-dups1089,43522
(defalias 'mon-delete-dups-eql mon-delete-dups-eql1093,43676
(defalias 'mon-list-deleql-dups mon-list-deleql-dups1097,43834
(defalias 'mon-list-delete-first mon-list-delete-first1101,43997
(defalias 'mon-list-remove-dups mon-list-remove-dups1105,44157
(defalias 'mon-list-transpose mon-list-transpose1109,44311
(defalias 'mon-bool-vector-to-list mon-bool-vector-to-list1113,44471
(defalias 'mon-list-ify-bool-vector mon-list-ify-bool-vector1117,44646
(defalias 'mon-boolean-vector-to-list mon-boolean-vector-to-list1121,44819
(defalias 'mon-pop2 mon-pop21125,44963
(defalias 'mon-list-pop2 mon-list-pop21136,45318
(defalias 'mon-region-append-to-register mon-region-append-to-register1155,45932
(defalias 'mon-register-append-region mon-register-append-region1159,46117
(defalias 'mon-append-next-kill mon-append-next-kill1163,46288
(defalias 'mon-register-append mon-register-append1167,46447
(defalias 'mon-read-keys-last-event mon-read-keys-last-event1171,46620
(defalias 'mon-key-catch-meta mon-key-catch-meta1175,46782
(defalias 'mon-key-decode-meta mon-key-decode-meta1179,46939
(defalias 'mon-string-from-keyboard-input mon-string-from-keyboard-input1183,47126
(defalias 'mon-key-read-as-string mon-key-read-as-string1187,47306
(defalias 'digit-char-p digit-char-p1202,47722
(defalias 'alpha-char-p alpha-char-p1206,47858
(defalias 'zerop-or-one zerop-or-one1210,47993
(defalias 'proper-list-p proper-list-p1214,48130
(defalias 'string-or-null-and-zerop string-or-null-and-zerop1219,48295
(defalias 'stringp-and-zerop-or-null stringp-and-zerop-or-null1223,48481
(defalias 'string-not-null-or-zerop string-not-null-or-zerop1227,48666
(defalias 'stringp-not-null-nor-zerop stringp-not-null-nor-zerop1231,48855
(defalias 'mon-is-alpha-char mon-is-alpha-char1237,49098
(defalias 'mon-proper-list-p mon-proper-list-p1241,49248
(defalias 'mon-dotted-list-p mon-dotted-list-p1245,49399
(defalias 'mon-list-dotted-and-proper-p mon-list-dotted-and-proper-p1249,49572
(defalias 'mon-list-mappable-p mon-list-mappable-p1253,49750
(defalias 'mon-mappable-sequence-p mon-mappable-sequence-p1257,49922
(defalias 'mon-list-all-booleanp mon-list-all-booleanp1261,50093
(defalias 'mon-byte-table-bits mon-byte-table-bits1266,50341
(defalias 'mon-bit-table-bits mon-bit-table-bits1270,50496
(defalias 'mon-char-coerce mon-char-coerce1274,50637
(defalias 'mon-symbol-cells-boundp mon-symbol-cells-boundp1278,50789
(defalias 'mon-capitalize-region mon-capitalize-region1302,51674
(defalias 'mon-region-reverse-chars mon-region-reverse-chars1306,51871
(defalias 'mon-region-wrap mon-region-wrap1310,52026
(defalias 'mon-string-split-commas mon-string-split-commas1314,52189
(defalias 'mon-split-region-at-commas mon-split-region-at-commas1318,52371
(defalias 'mon-indent-refill-region mon-indent-refill-region1322,52552
(defalias 'mon-indent-region-refill mon-indent-region-refill1326,52732
(defalias 'mon-region-refill-indent mon-region-refill-indent1330,52912
(defalias 'mon-region-count-regexp-matches mon-region-count-regexp-matches1334,53105
(defalias 'mon-string-at-point mon-string-at-point1347,53488
(defalias 'mon-get-system-process mon-get-system-process1359,53865
(defalias 'mon-get-system-process-list mon-get-system-process-list1363,54038
(defalias 'mon-insert-system-process-list mon-insert-system-process-list1367,54228
(defalias 'mon-get-system-process-w-name mon-get-system-process-w-name1371,54422
(defalias 'mon-permute-string mon-permute-string1384,54801
(defalias 'mon-buffer-get-word-list mon-buffer-get-word-list1397,55203
(defalias 'mon-region-reverse-words mon-region-reverse-words1401,55385
(defalias 'mon-reverse-region-words mon-reverse-region-words1405,55587
(defalias 'mon-buffer-get-word-count mon-buffer-get-word-count1409,55769
(defalias 'mon-make-list-alphabet mon-make-list-alphabet1424,56223
(defalias 'file-truename-p file-truename-p1439,56645
(defalias 'file-attributes-plist file-attributes-plist1443,56805
(defalias 'directory-attributes-plist directory-attributes-plist1447,56991
(defalias 'find-buffer-visiting-other-live-frame find-buffer-visiting-other-live-frame1451,57206
(defalias 'get-buffer-visiting-other-live-frame get-buffer-visiting-other-live-frame1455,57440
(defalias 'frame-live-visible-graphic-p frame-live-visible-graphic-p1459,57656
(defalias 'mon-move-file mon-move-file1467,57982
(defalias 'mon-mv-file mon-mv-file1471,58112
(defalias 'mon-file-move mon-file-move1475,58244
(defalias 'mon-file-mv mon-file-mv1479,58375
(defalias 'mon-rename-file mon-rename-file1483,58508
(defalias 'mon-rnm-file mon-rnm-file1487,58642
(defalias 'mon-file-rename mon-file-rename1491,58779
(defalias 'mon-file-rnm mon-file-rnm1495,58913
(defalias 'dired-find-file-other-frame dired-find-file-other-frame1501,59134
(defalias 'dired-up-here dired-up-here1505,59301
(defalias 'dired-uninsert-subdir dired-uninsert-subdir1509,59473
(defalias 'dired-subdir-uninsert dired-subdir-uninsert1513,59644
(defalias 'dired-uninsert-subdir-all dired-uninsert-subdir-all1517,59823
(defalias 'dired-subdir-uninsert-all dired-subdir-uninsert-all1521,60010
(defalias 'mon-get-buffer-visiting-other-live-frame mon-get-buffer-visiting-other-live-frame1527,60283
(defalias 'mon-file-attributes-plist mon-file-attributes-plist1531,60499
(defalias 'mon-directory-attributes-plist mon-directory-attributes-plist1535,60700
(defalias 'mon-dired-toggle-dwim-target mon-dired-toggle-dwim-target1539,60899
(defalias 'mon-dired-kill-files-to-list mon-dired-kill-files-to-list1543,61095
(defalias 'mon-dired-copy-files-to-list mon-dired-copy-files-to-list1547,61290
(defalias 'mon-dired-kill-files-to-strings mon-dired-kill-files-to-strings1551,61491
(defalias 'mon-dired-copy-files-to-strings mon-dired-copy-files-to-strings1555,61697
(defalias 'mon-directory-get-size mon-directory-get-size1559,61885
(defalias 'mon-get-directory-size mon-get-directory-size1563,62050
(defalias 'mon-buffer-get-new-w-stamp mon-buffer-get-new-w-stamp1568,62226
(defalias 'mon-dir-name-absolute mon-dir-name-absolute1572,62404
(defalias 'mon-directory-name-absolute mon-directory-name-absolute1576,62587
(defalias 'mon-dir-name-relative-w-absolute mon-dir-name-relative-w-absolute1580,62787
(defalias 'mon-directory-name-relative-w-absolute mon-directory-name-relative-w-absolute1584,63006
(defalias 'mon-file-copy-in-sub-dirs mon-file-copy-in-sub-dirs1588,63205
(defalias 'mon-file-copy-multiple mon-file-copy-multiple1592,63384
(defalias 'mon-make-path mon-make-path1596,63538
(defalias 'mon-buffer-string-split-name mon-buffer-string-split-name1600,63705
(defalias 'mon-buffer-string-split-parent-dir mon-buffer-string-split-parent-dir1604,63914
(defalias 'mon-buffer-string-split-parent-dir mon-buffer-string-split-parent-dir1608,64134
(defalias 'mon-buffer-get-parent-dir mon-buffer-get-parent-dir1612,64336
(defalias 'mon-dir-name-truncate-for-prompt mon-dir-name-truncate-for-prompt1616,64534
(defalias 'mon-dir-recurse-string-split mon-dir-recurse-string-split1620,64734
(defalias 'mon-buffer-string-split-dir-recurse mon-buffer-string-split-dir-recurse1624,64944
(defalias 'mon-get-dir-common-path mon-get-dir-common-path1628,65137
(defalias 'mon-buffer-subdirs-insert mon-buffer-subdirs-insert1632,65314
(defalias 'mon-dir-get-subdir mon-dir-get-subdir1636,65487
(defalias 'mon-file-rename-serial mon-file-rename-serial1640,65659
(defalias 'mon-file-copy-path mon-file-copy-path1644,65824
(defalias 'mon-buffer-file-copy-path mon-buffer-file-copy-path1648,66001
(defalias 'mon-buffer-get-directories mon-buffer-get-directories1652,66180
(defalias 'mon-dir-get-subdirs-descend mon-dir-get-subdirs-descend1656,66371
(defalias 'mon-get-directory-and-subdirs-list mon-get-directory-and-subdirs-list1660,66566
(defalias 'mon-dir-async-du mon-dir-async-du1664,66739
(defalias 'mon-directory-du-async mon-directory-du-async1668,66899
(defalias 'mon-du-async-dir mon-du-async-dir1672,67053
(defvaralias '*mon-country-code-hash-table* *mon-country-code-hash-table*1687,67438
(defalias 'w3m-copy-this-url-as-kill w3m-copy-this-url-as-kill1693,67678
(defalias 'w3m-copy-current-url-as-kill w3m-copy-current-url-as-kill1697,67860
(defalias 'mon-url-escape mon-url-escape1701,68020
(defalias 'mon-encode-url mon-encode-url1705,68159
(defalias 'mon-url-unescape mon-url-unescape1709,68302
(defalias 'mon-decode-url mon-decode-url1713,68443
(defalias 'mon-search-wiki mon-search-wiki1717,68584
(defalias 'mon-buffer-get-retrieved-url mon-buffer-get-retrieved-url1721,68758
(defalias 'mon-get-w3m-dired-file mon-get-w3m-dired-file1725,68943
(defalias 'mon-w3m-get-url-at-point-maybe mon-w3m-get-url-at-point-maybe1729,69127
(defalias 'mon-w3m-get-url-at-point mon-w3m-get-url-at-point1733,69318
(defalias 'mon-get-w3m-read-gnu-lists-nxt-prv mon-get-w3m-read-gnu-lists-nxt-prv1737,69517
(defalias 'mon-line-strings-region-delimited mon-line-strings-region-delimited1753,69993
(defalias 'mon-line-strings-get-delimited-region mon-line-strings-get-delimited-region1757,70210
(defalias 'mon-function-arity mon-function-arity1761,70393
(defalias 'mon-function-args mon-function-args1765,70553
(defalias 'mon-insert-documentation mon-insert-documentation1769,70724
(defalias 'mon-help-reference-sheet mon-help-reference-sheet1773,70909
(defalias 'mon-help-finder-keywords mon-help-finder-keywords1777,71082
(defalias 'mon-help-directory-file-functions-usage mon-help-directory-file-functions-usage1781,71293
(defalias 'mon-help-network-process mon-help-network-process1785,71496
(defalias 'mon-help-types mon-help-types1789,71660
(defalias 'mon-help-face-functions mon-help-face-functions1793,71828
(defalias 'mon-help-charset-coding-functions mon-help-charset-coding-functions1797,72015
(defalias 'mon-help-ascii-chars mon-help-ascii-chars1801,72202
(defalias 'mon-help-ecma-48-chars-cntl->hex mon-help-ecma-48-chars-cntl->hex1805,72390
(defalias 'mon-help-cntl->hex->ecma-35 mon-help-cntl->hex->ecma-351809,72581
(defalias 'mon-help-time-iso-8601 mon-help-time-iso-86011813,72758
(defalias 'mon-help-elisp-info mon-help-elisp-info1817,72919
(defvaralias '*reference-sheet-help-A-HAWLEY* *reference-sheet-help-A-HAWLEY*1822,73128
(defvaralias '*doc-cookie* *doc-cookie*1826,73302
(defalias 'mon-help-cl-packages mon-help-cl-packages1839,73657
(defalias 'mon-help-slime-keys mon-help-slime-keys1843,73807
(defalias 'mon-help-swank-functions mon-help-swank-functions1847,73971
(defalias 'mon-help-cl-symbols-html mon-help-cl-symbols-html1851,74145
(defalias 'mon-help-cl-symbols mon-help-cl-symbols1855,74311
(defalias 'mon-hyperspec-lookup mon-hyperspec-lookup1859,74465
(defalias 'mon-help-CL-reader-macro-syntax mon-help-CL-reader-macro-syntax1863,74647
(defalias 'mon-help-csstidy mon-help-csstidy1880,75086
(defalias 'mon-help-bzr-commands mon-help-bzr-commands1895,75498
(defalias 'mon-stamp-date-only mon-stamp-date-only1910,75918
(defalias 'mon-today-stamp mon-today-stamp1914,76065
(defvaralias '*mon-emacs2html-temp* *mon-emacs2html-temp*1933,76729
(defalias 'comment-divider comment-divider1953,77262
(defalias 'mon-string-n-fancy-times mon-string-n-fancy-times1959,77487
(defalias 'mon-string-insert-n-times mon-string-insert-n-times1963,77675
(defalias 'mon-comment-divider->col mon-comment-divider->col1967,77857
(defalias 'mon-lisp-comment-to-col mon-lisp-comment-to-col1971,78037
(defalias 'mon-insert-doc-xref-eg mon-insert-doc-xref-eg1975,78210
(defalias 'mon-CL-package-complete mon-CL-package-complete1979,78389
(defalias 'mon-insert-CL-mode-line-template mon-insert-CL-mode-line-template1983,78588
(defalias 'mon-add-lisp-CL-file-local-prop-template mon-add-lisp-CL-file-local-prop-template1987,78821
(defalias 'mon-insert-CL-file-template mon-insert-CL-file-template1991,79037
(defalias 'mon-insert-CL-package-template mon-insert-CL-package-template1995,79240
(defalias 'mon-insert-CL-eval-when mon-insert-CL-eval-when2000,79436
(defalias 'mon-insert-CL-debug mon-insert-CL-debug2004,79609
(defalias 'mon-insert-jump-lisp-doc mon-insert-jump-lisp-doc2008,79784
(defalias 'bug-insert-copyright bug-insert-copyright2014,80037
(defalias 'mon-insert-naf-mode-file-template mon-insert-naf-mode-file-template2022,80438
(defvaralias '*regexp-version-alist* *regexp-version-alist*2036,80859
(defvaralias '*whitespace-chars* *whitespace-chars*2041,81047
(defalias 'mon-translate-string-canonical mon-translate-string-canonical2059,81637
(defalias 'mon-canonical-string mon-canonical-string2063,81810
(defalias 'mon-replace-string-pairs-region-no-props mon-replace-string-pairs-region-no-props2067,82013
(defalias 'mon-clean-csv-fields mon-clean-csv-fields2071,82212
(defalias 'mon-clean-mail-headers mon-clean-mail-headers2075,82377
(defalias 'mon-clean-file-name-string mon-clean-file-name-string2079,82552
(defalias 'mon-clean-html-chars mon-clean-html-chars2083,82723
(defalias 'mon-clean-html-tags mon-clean-html-tags2087,82882
(defalias 'mon-clean-xml-escapes mon-clean-xml-escapes2091,83041
(defalias 'mon-clean-whitespace mon-clean-whitespace2095,83204
(defalias 'mon-clean-trail-whitespace mon-clean-trail-whitespace2099,83377
(defalias 'mon-clean-blank-lines mon-clean-blank-lines2103,83552
(defalias 'mon-clean-spc-tab-eol mon-clean-spc-tab-eol2107,83717
(defalias 'mon-clean-spc-tab-at-eol-in-region mon-clean-spc-tab-at-eol-in-region2111,83908
(defalias 'mon-clean-uniq-lines mon-clean-uniq-lines2115,84097
(defalias 'mon-clean-piped-list mon-clean-piped-list2119,84258
(defalias 'mon-clean-freenode-log mon-clean-freenode-log2123,84423
(defalias 'mon-clean-irc-log-buffer mon-clean-irc-log-buffer2127,84596
(defalias 'replace-char-in-string-mon replace-char-in-string-mon2143,85273
(defalias 'replace-in-string-mon replace-in-string-mon2147,85445
(defalias 'mon-replace-char-in-string mon-replace-char-in-string2155,85741
(defalias 'mon-map-regexp-matches mon-map-regexp-matches2164,86038
(defalias 'mon-map-regexp-matches-in-region mon-map-regexp-matches-in-region2168,86219
(defalias 'mon-region-increment-line-numbers mon-region-increment-line-numbers2172,86431
(defalias 'mon-region-increment-numbered-lines mon-region-increment-numbered-lines2176,86645
(defalias 'mon-cln-duplicate-lines mon-cln-duplicate-lines2181,86838
(defalias 'mon-remove-duplicate-lines mon-remove-duplicate-lines2185,87025
(defalias 'naf-delete-back-up-list naf-delete-back-up-list2190,87210
(defalias 'mon-defranc-benezit mon-defranc-benezit2194,87378
(defalias 'mon-defranc-benezit-fields mon-defranc-benezit-fields2198,87548
(defalias 'mon-cln-common-abbrevs mon-cln-common-abbrevs2203,87727
(defalias 'list-colors-defined list-colors-defined2220,88218
(defalias 'mon-color-list-defined mon-color-list-defined2228,88494
(defalias 'mon-color-list-duplicates mon-color-list-duplicates2237,88851
(defalias 'mon-color-adjust mon-color-adjust2241,89014
(defalias 'get-bmps-in-dir get-bmps-in-dir2259,89493
(defalias 'get-nefs-in-dir get-nefs-in-dir2263,89646
(defalias 'mon-get-ebay-bmps-list mon-get-ebay-bmps-list2271,89929
(defalias 'mon-rotate-images mon-rotate-images2288,90428
(defalias 'mon-identify-image mon-identify-image2292,90581
(defalias 'boxcutter-verify-image-type boxcutter-verify-image-type2310,91074
(defalias 'naf-drive-dired-artist-letter naf-drive-dired-artist-letter2323,91474
(defalias 'naf-dired-artist-letter naf-dired-artist-letter2327,91659
(defalias 'naf-drive-dired-brand-letter naf-drive-dired-brand-letter2331,91862
(defalias 'naf-dired-brand-letter naf-dired-brand-letter2335,92043
(defalias 'slot-makunbound slot-makunbound2349,92556
(defalias 'slime-next-xref slime-next-xref2360,92891
(defalias 'slime-prev-xref slime-prev-xref2364,93038
(defalias 'mon-slime-insert-arglist mon-slime-insert-arglist2368,93203
(defalias 'mon-slime-quit-description mon-slime-quit-description2372,93386
(defalias 'slime-compile-defun-for-debug slime-compile-defun-for-debug2376,93584
(defalias 'slime-copy-presentation-at-point-to-kill-ring-no-props slime-copy-presentation-at-point-to-kill-ring-no-props2381,93884
(defalias 'slime-copy-presentation-to-kill-ring-no-props slime-copy-presentation-to-kill-ring-no-props2385,94161

naf-mode/mon-eight-bit-raw-utils.el,38
(defun mon-cln-eight-bit-raw 87,2800

naf-mode/mon-cifs-utils.el,908
(defvar *mon-CIFS-misc-path-alist*161,6009
(defvar *mon-CIFS-auth-protocol* 200,8176
(defvar *mon-CIFS-workgroup* 214,8809
(defvar *mon-CIFS-domain* 221,9033
(defvar *mon-CIFS-user* 240,9961
(defvar *mon-CIFS-pass* 252,10457
(defvar *mon-CIFS-mount-root* 263,10941
(defvar *mon-CIFS-vars-unbound* 276,11497
(defvar *mon-CIFS-mount-points* 299,12669
(defun mon-map-cifs-domain->local-mount 333,14797
(defun mon-get-cifs-credentials 381,17601
(defun mon-build-cifs-credentials 426,19996
(defun mon-get-cifs-mount-points 459,21748
(defun mon-mount-cifs 488,23108
(defun mon-unmount-cifs 553,26618
(defun mon-verify-cifs-credentials 569,27468
(defun mon-inform-cifs-credentials-unbound 597,28873
(defun mon-bind-cifs-vars-at-loadtime 661,32679
(defvar *mon-auth-source-debug-var* 743,37473
(defvar *mon-auth-source-cache-debug-var* 754,38074
(defun mon-spit-auth-source-debug->var 783,39697

naf-mode/mon-time-utils.el,945
(defun mon-comment-divider-w-len 303,13134
(cl-defun mon-date-stamp 358,16154
(defun mon-get-current-year 413,19197
(defun mon-format-iso-8601-time 436,20250
(defun mon-file-older-than-file-p 496,23682
(defun mon-get-file-mod-times 539,25846
(defun mon-conv-time-flt-pnt 591,28818
(defun mon-comp-times-flt-pnt 613,29933
(defun mon-accessed-time-stamp 640,31260
(cl-defun mon-timestamp 656,31958
(defun mon-stamp 751,37494
(defun mon-accessed-stamp 776,38604
(cl-defun mon-stamp-in-context 806,39953
(defun mon-lisp-stamp 896,45356
(defun mon-file-stamp-vrfy-put-eof 964,49024
(defun mon-file-stamp 1012,51560
(defun mon-file-stamp-minibuffer 1220,63581
(defun mon-file-stamp-buffer-filename 1271,65830
(defun mon-convert-ebay-time 1327,69135
(defun mon-convert-ebay-time-mvb 1362,71034
(defun mon-cln-ebay-time-string 1387,72285
(defun mon-calculate-ebay-timezone-diff 1541,80464
(defun calendar-goto-doomsday 1586,82818

naf-mode/mon-testme-fancy.el,46
(defun mon-insert-lisp-testme-fancy 151,7599

naf-mode/mon-animate-nursery-rhymes.el,135
(defvar *mon-nursery-rhymes* 85,2656
(defun mon-animate-nursery-rhyme-sequence 912,36438
(defun mon-animate-nursery-rhyme 934,37450

mon-w32-load.el,525
(defun mon-maximize-frame-w32 113,3377
(defun mon-minimize-frame 122,3727
(defun mon-restore-frame 133,4140
(defun mon-menu-bar 142,4548
(defun mon-open-abbyy 164,5396
(defun mon-open-notepad++ 182,6063
(defun mon-open-fastone 197,6680
(defun mon-open-photoshop 213,7256
(defun mon-open-explorer 230,7943
(defalias 'mon-explorer-open mon-explorer-open244,8496
(defun mon-open-images-ed-swap 250,8679
(defun mon-open-program-files 267,9570
(defun mon-open-moz-down 281,10224
(defun mon-open-workspace 300,11097

mon-default-loads.el,1022
(defgroup mon-default-loads 140,4568
(defvar *IS-MON-OBARRAY* 158,5610
(defvar *IS-MON-OBARRAY-SYMS* 176,6331
(defcustom *mon-default-loads-xrefs* 194,7026
(defun mon-get-mon-emacsd-paths 227,8886
(defconst IS-W32-P292,12490
(defvaralias 'win32p win32p313,13507
(defconst IS-GNU-P321,13732
(defvaralias 'gnu-linuxp gnu-linuxp342,14778
(defconst IS-DARWIN-P350,15012
(defvaralias 'darwinp darwinp371,16069
(defconst IS-BUG-P 374,16143
(defconst IS-BUG-P-REMOTE 387,16805
(defconst IS-MON-P-W32 400,17488
(defconst IS-MON-P-GNU 414,18190
(defconst IS-MON-P-DARWIN 427,18877
(defconst IS-MON-P441,19597
(defconst IS-NOT-A-MON-SYSTEM458,20504
(defconst IS-MON-SYSTEM-P480,21717
(defvar set-emacs-root 517,23546
(defconst *mon-emacs-root*624,30075
(defconst *mon-site-lisp-root*650,31467
(defconst *mon-naf-mode-root*670,32564
(defconst *mon-naf-mode-notes*692,33708
(defconst *mon-ebay-tmplt-mode-root* 713,34854
(defconst *mon-user-emacsd*735,36162
(defconst *mon-local-emacs-temp-dir*763,37828

mon-keybindings.el,689
(defgroup mon-keybindings 209,7462
(defcustom *mon-keybindings-xrefs* 228,8547
(defun mon-keybind-globally 263,10143
(defun mon-keybind-dired-mode 394,15606
(defun mon-keybind-completions 442,18175
(defun mon-keybind-info-mode 465,19384
(defun mon-keybind-w3m 519,21536
(defun mon-keybind-emacs-lisp-mode 648,27595
(defun mon-keybind-lisp-interaction-mode 699,30402
(defun mon-keybind-lisp-mode 728,32020
(defun mon-keybind-slime-selector-helper 761,33651
(defun mon-keybind-slime 777,34286
(defun mon-keybind-slime-inspector 959,43860
(defun mon-keybind-slime-fuzzy-completions 995,45716
(defun mon-conf-stamp-in-context 1030,47419
(defun mon-keybind-conf-mode 1042,47878

mon-site-local-defaults.el,540
(defun mon-string-wonkify 109,4246
(defun mon-build-user-name-example 153,6349
(defun mon-build-user-name-example-TEST 207,9285
(defun mon-build-misc-path-example 236,10593
(defun mon-build-mon-emacsd-example 302,14043
(defun mon-user-name-conditionals 381,18040
(defun mon-system-type-conditionals 463,22531
(defun mon-user-system-conditionals-TEST 508,24892
(defconst *mon-emacsd* 561,28035
(defvar *mon-misc-path-alist* 597,29907
(defconst *MON-NAME* 656,33414
(defconst *BUG-NAME* 681,34735
(defvar *MON-ORG-NAME*704,35937

mon-post-load-hooks.el,687
(defgroup mon-post-load-hooks 123,3651
(defcustom *mon-post-load-hooks-xrefs* 140,4738
(defun mon-purge-cl-symbol-buffers-on-load 176,6480
(defvar *mon-post-load-hook-trigger-buffer* 220,8820
(defun mon-run-post-load-hooks-helper 238,9742
(defun mon-run-post-load-hooks 255,10712
(defun mon-purge-doc-view-cache-directory 350,15696
(defun mon-purge-thumbs-directory 368,16713
(defun mon-purge-slime-swank-port-file 387,17690
(defun mon-purge-tramp-persistency-file 403,18479
(defun mon-purge-temporary-file-directory 420,19445
(defvar *mon-purge-emacs-temp-file-dir-fncns* 444,20632
(defun mon-purge-emacs-temp-files-on-quit 467,21786
(defun mon-scratch-postload 497,23226

mon-default-start-loads.el,3529
(defgroup mon-default-start-loads 193,8233
(defcustom *mon-default-start-loads-xrefs* 253,11337
(defvar *mon-default-start-load-sanity* 319,14501
(defvar *mon-default-start-load-sanity-WARN-ONLY* 331,15118
(defun mon-build-path-for-load-path 344,15818
(defmacro mon-default-start-error/sane 361,16753
(defun mon-set-split-window-init 424,19870
(defun mon-set-load-path-init 454,21129
(defvar *mon-byte-compile-warnings* 494,22875
(defun mon-set-byte-compile-warnings-init 504,23551
(defun mon-set-color-themes-init 529,24850
(defun mon-toggle-show-point-mode 597,27798
(defun mon-set-emacs-temp-file/dir-init 621,29059
(defun mon-set-infopath-init 696,32821
(defun mon-set-info-lookup-init 830,41716
(defun mon-set-bookmark-file-init 869,43398
(defun mon-set-woman-manpath-init 925,46313
(defun mon-set-C-source-directory-init 980,49193
(defun mon-set-unicodedata-init 1069,54134
(defun mon-set-bbdb-init 1109,56057
(defvar *mon-desktop-not-to-save-buffer-names*1154,58131
(defvar *mon-desktop-desktop-locals-to-save*1189,59451
(defvar *mon-desktop-desktop-modes-not-to-save*1212,60415
(defun mon-desktop-buffers-not-to-save-function-buffer-name-helper 1231,61322
(defun mon-desktop-buffers-not-to-save-function-mode-name-helper 1257,62577
(defun mon-desktop-buffers-not-to-save-function 1285,64232
(defun mon-set-desktop-init 1313,65902
(defun mon-set-printer-postscript-init 1353,68020
(defun mon-set-doc-view-programs-init 1404,70895
(defun mon-set-thumbs-conversion-program-init 1448,73332
(defun mon-set-boxcutter-init 1511,76815
(defun mon-set-image-dired-init 1547,78695
(defun mon-set-ispell-init 1736,86153
(defun mon-set-help-mode-init 1780,87998
(defun mon-set-ibuffer-init 1835,90662
(defun mon-set-ido-init 1858,91651
(defun mon-set-org-init 1948,96155
(defun mon-set-custom-customizations-init 1971,96896
(defun mon-set-customizations-before-custom-file-init 2015,99442
(defun mon-set-custom-file-init-w32-configs 2100,103162
(defun mon-set-custom-file-init 2144,105194
(defun mon-set-common-lisp-hspec-init 2198,108078
(defun mon-set-show-paren-init 2251,111263
(defun mon-set-lisp-init 2288,113376
(defun mon-set-proced-init 2349,116569
(defun mon-set-auctex-init 2374,117670
(defun mon-set-vc-init 2391,118321
(defun mon-set-magit-init 2409,119151
(defun mon-set-dvc-init 2479,123309
(defun mon-set-pdf-view-init 2531,126093
(defun mon-set-epa-configs-init 2567,127518
(defun mon-set-erc-configs-init 2603,129247
(defun mon-erc-post-cloak-autojoin 2702,133468
(defun mon-set-url-pkg-init 2717,134232
(defun mon-set-google-maps-init 2798,137340
(defun mon-set-w3m-init 2826,138659
(defun mon-set-markdown-mode-init 2867,140666
(defvar *mon-ekg-db-file*2907,142062
(defun mon-set-ekg-db-file 2916,142448
(defun mon-set-triples-ekg-init 2950,144099
(defun mon-set-browser-init 3034,147800
(defun mon-set-buffer-local-comment-start 3077,150175
(defun mon-set-buffer-local-comment-start-init 3100,151479
(defun mon-set-css-path-init 3140,153544
(defun mon-set-longlines-init 3179,155475
(defun mon-rst-mode-facification 3201,156381
(defun mon-set-rst-mode-faces-init 3217,157265
(defun mon-set-apache-mode-init 3236,158092
(defun mon-set-traverselisp-init 3261,159372
(defun mon-load-cedet 3288,160598
(defun mon-keybind-w32-init 3307,161344
(defun mon-keybind-put-hooks-init 3342,163057
(defun mon-set-github-paths-init 3384,165109
(defun mon-set-mon-feature-customs-init 3411,166367
(defun mon-set-system-specific-and-load-init 3480,169301

slime-loads-GNU.el,0

naf-mode/mon-loaddefs.el,0

naf-mode/naf-mode-bibliograpbhic-entry.el,0
